library(tidyverse)
library(dplyr)
library(ggplot2)
library(geofi)
library(sf)
library(geosphere)
###########################
#     Load Data Files     #
###########################
#set working directory
setwd("../..")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(geofi)
library(sf)
library(geosphere)
###########################
#     Load Data Files     #
###########################
#set working directory
setwd("../..")
#load parentage results - all loci = al
UHA_al_par <- read.csv("Analysis/Parentage_Analysis/All_Loci/Output_Files/all_loci_par_sum.csv",
row.names = NULL)
setwd(C:/Users/eschumacher/Documents/GitHub/USBGHybridAcornsREU2023)
setwd("C:/Users/eschumacher/Documents/GitHub/USBGHybridAcornsREU2023")
#load parentage results - all loci = al
UHA_al_par <- read.csv("Analysis/Parentage_Analysis/CERVUS_Fikes/All_Loci/Output_Files/all_loci_par_sum.csv",
row.names = NULL)
#load parentage results - all loci = al
UHA_al_par <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Output_Files/all_loci_par_sum.csv",
row.names = NULL)
View(UHA_al_par)
#load parentage results - all loci = al
UHA_al_par <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Output_Files/all_loci_par_sum.csv")
#remove periods from UHA data frame
colnames(UHA_al_par) <- gsub("\\.", "_", colnames(UHA_al_par))
View(UHA_al_par)
#load parentage results - reduced loci = rl
UHA_rl_par <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/Output_Files/red_loci_par_sum.csv")
#load parentage results - reduced loci = rl
UHA_rl_par <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/Red_Loci/Output_Files/red_loci_par_sum.csv")
View(UHA_rl_par)
#load parentage results - reduced loci = rl
UHA_rl_par <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/Red_Loci/Output_Files/red_loci_par_sum.csv")
#remove periods from colnames
colnames(UHA_rl_par) <- gsub("\\.", "_", colnames(UHA_rl_par))
##create a list of the parentage results data frames
par_res_list <- list(UHA_al_par, UHA_rl_par)
#create a list of scenarios
scen <- c("all_loci", "red_loci")
#loop to reduce the parental summary data frames for low confidence father assignments
for(sc in 1:length(scen)){
temp_df <- par_res_list[[sc]]
#first, join genotype files with parentage results
HCF_df  <- temp_df[((temp_df$Pair_LOD_score > 0) & (temp_df$Trio_LOD_score > 0)),]
#write out data frame
write.csv(HCF_df, paste0("Data_Files/CSV_Files/", scen[[sc]], "_HCF_par_sum.csv"))
}
#load in all parentage summary data frames
par_sum_list <- list.files(path = "Data_Files/CSV_Files/", pattern = "par_sum")
#reorder list
par_sum_list <- list(par_sum_list[[2]], par_sum_list[[1]],
par_sum_list[[4]], par_sum_list[[3]])
#read CSVs
par_sum_df_list <- list()
#Loop over
for(df in par_sum_list){
par_sum_df_list[[df]] <- read.csv(paste0("Data_Files/CSV_Files/", df))
}
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/All_Loci/Input_Files/UHA_all_loci_genotype_df.csv")
#Reduced loci
rl_score_df <- read.csv("Analysis/Parentage_Analysis/Red_Loci/Input_Files/UHA_red_loci_genotype_df.csv")
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Input_Files/UHA_all_loci_genotype_df.csv")
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Input_Files/UHA_all_loci_genotype_df.csv")
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Input_Files/UHA_all_loci_clean_genotype_df.csv")
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Input_Files/UHA_all_loci_clean_genotype_df.csv")
#Reduced loci
rl_score_df <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/Red_Loci/Output_Files/UHA_red_loci_clean_genotype_df.csv")
#Reduced loci
rl_score_df <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/Red_Loci/Input_Files/UHA_red_loci_clean_genotype_df.csv")
#combine into a list
score_df_list <- list(al_score_df, rl_score_df)
off_df_list <- list()
for(o in 1:length(score_df_list)){
#limit data frame to just offspring for each scenario
off_df_list[[o]] <- score_df_list[[o]][score_df_list[[o]]$Parent_Offspring == "O",]
#rename "Tissue ID" to "Offspring_ID"
colnames(off_df_list[[o]])[1] <- "Offspring_ID"
}
#load UHA database
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#all scenarios
full_scen <- c("all_loci", "HCF_all_loci",
"red_loci", "HCF_red_loci")
#loop over four scenarios
for(sc in 1:length(full_scen)){
#store temporary data frame
par_temp_df <- par_sum_df_list[[sc]]
#replace periods with underscores
colnames(par_temp_df) <- gsub("\\.", "_", colnames(par_temp_df))
#join maternal information with the parentage summary
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Mother_ID' = 'Tissue_ID'))
#rename the species data frame to the maternal species
par_temp_df <- par_temp_df %>% rename("Maternal_Species" = "Species",
"Maternal_Longitude" = "Longitude",
"Maternal_Latitude" = "Latitude",
"Maternal_Accession" = "Accession_Number")
##reorg data frame
#Adding in Species Information for Maternal and Paternal trees
keep_col_ID <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude",
"Maternal_Latitude", "Maternal_Accession")
# Narrowing the data again after the join of data sets
par_temp_df <- par_temp_df[keep_col_ID]
#add paternal information
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Candidate_father_ID' = 'Tissue_ID'))
#rename columns
par_temp_df <- par_temp_df %>% rename('Candidate_Father_Species' = 'Species',
"Candidate_Father_Longitude" = "Longitude",
"Candidate_Father_Latitude" = "Latitude",
"Candidate_Father_Accession" = "Accession_Number")
#reduce by empty columns
keep_col_ID2 <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude", "Maternal_Latitude",
"Maternal_Accession", "Candidate_Father_Species",
"Candidate_Father_Longitude", "Candidate_Father_Latitude",
"Candidate_Father_Accession")
#reduce data frame by populated columns
par_temp_df <- par_temp_df[keep_col_ID2]
###do half sibling analysis
##Mikaely Evans' code
#initialize columns in the data frame
par_temp_df$Half_Sibs <- NA  # Made three new columns for this analysis
par_temp_df$M_Accession_Abrv <- NA
par_temp_df$F_Accession_Abrv <- NA
#Abbreviating the accession numbers for the maternal and paternal trees was necessary to assign half sibling status because it is only necessary to look at the first 6 characters in the accession number to know if the trees came from the same lineage.
par_temp_df$M_Accession_Abrv <- substr(par_temp_df$Maternal_Accession, 0, 6)
#This line adds the Maternal accession abbreviation to the M_Accession_Abrv column
par_temp_df$F_Accession_Abrv <- substr(par_temp_df$Candidate_Father_Accession, 0, 6)
#This line adds the paternal accession abbreviation to the F_Accession_Abrv column
par_temp_df <- par_temp_df %>%
mutate("Half_Sibs" = case_when(M_Accession_Abrv == F_Accession_Abrv ~ TRUE,
M_Accession_Abrv != F_Accession_Abrv ~ FALSE))
##Add geographic information
#create a column for distance between mom and dad
par_temp_df$dist_par <- NA
#loop to calculate distance between parents
for(dist in 1:nrow(par_temp_df)){
par_temp_df$dist_par[dist] <- distm(par_temp_df[dist,5:6],
par_temp_df[dist,9:10],
fun=distGeo)
}
###Code to add hybrid status
par_temp_df$Hybrid_Status <- NA
par_temp_df <- par_temp_df %>%
mutate(Hybrid_Status = case_when(Maternal_Species == Candidate_Father_Species ~ FALSE,
Maternal_Species != Candidate_Father_Species ~ TRUE))
#write to file
write.csv(par_temp_df, paste0("Data_Files/CSV_Files/UHA_",full_scen[[sc]], "_analysis_df.csv"),
row.names = FALSE)
}
library(tidyverse)
library(ggplot2)
#set working directory
setwd("../..")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
install.packages("Demerelate")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
library(tidyverse)
#set working directory
setwd("../../..")
#read in summary df for final figures
UHA_res_df <- read.csv("Results/Parentage_Results/CSV_Files/UHA_HCF_all_loci_analysis_df.csv")
#reorg list to fit order
par_sum_df <- list(par_sum_df[[2]], par_sum_df[[1]],
par_sum_df[[4]], par_sum_df[[3]])
setwd("C:/Users/eschumacher/Documents/GitHub/USBG_Hybrid_Acorns")
library(tidyverse)
#read in summary df for final figures
UHA_res_df <- read.csv("Results/Parentage_Results/CSV_Files/UHA_HCF_all_loci_analysis_df.csv")
#load in list of parentage summary results CSVs
par_sum_df <- list.files(path = "Results/Parentage_Results/CSV_Files",
pattern = "par_sum.csv")
#reorg list to fit order
par_sum_df <- list(par_sum_df[[2]], par_sum_df[[1]],
par_sum_df[[4]], par_sum_df[[3]])
#list out analysis data frames
par_sum_analysis <- list.files(path = "Results/Parentage_Results/CSV_Files",
pattern = "analysis_df")
#order list
par_sum_analysis <- c(par_sum_analysis[[1]], par_sum_analysis[[2]],
par_sum_analysis[[4]], par_sum_analysis[[3]])
#load full scenario data frames
full_scen <- c("all_loci_AF", #all loci included with all father assignments
"all_loci_HCF", #all loci with only high confidence fathers included
"red_loci_AF", #reduced loci with all father assignments
"red_loci_HCF" #reduce loci with only high confidence father assignments included
)
#pull in UHA database
UHA_database <- read.csv("./Data_Files/CSV_Files/UHA_database.csv")
#save out list of maternal IDs
mat_n_ids <- paste0("MT",1:11)
#list out the mt ids
mat_ids <- list()
for(mat in mat_n_ids){
mat_ids[[mat]] <- UHA_database[UHA_database$MT_ID == mat,"Tissue_ID"]
}
###########################################
## create a summary data frame with the maternal IDs
par_sum_stat_df <- matrix(nrow = length(mat_ids),
ncol = 11)
#add the maternal ids in a column
par_sum_stat_df[,1] <-  as.character(mat_ids)
#loop over all parentage scenarios with a summary data file
for(par in seq_along(par_sum_df)){
temp_df <- read.csv(paste0("./Results/Parentage_Results/CSV_Files/",par_sum_analysis[[par]]))
#loop over each maternal individual to create data frame
for(mat in seq_along(mat_ids)){
#add a column for the offspring counts by mom
par_sum_stat_df[mat,2] <- length(temp_df[temp_df$Maternal_ID == mat_ids[[mat]],"Offspring_ID"])
#add a column for number of dads per mom
par_sum_stat_df[mat,3] <- length(unique(temp_df[temp_df$Maternal_ID == mat_ids[[mat]],"Candidate_father_ID"]))
#add columns with the number of hybrid per mom and the number of hybrid fathers
par_sum_stat_df[mat,4] <- length(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]) & (temp_df$Hybrid_Status == TRUE),"Candidate_father_ID"])
par_sum_stat_df[mat,5] <- length(unique(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]) & (temp_df$Hybrid_Status == TRUE),"Candidate_father_ID"]))
#add half-sib columns
par_sum_stat_df[mat,6] <- length(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]) & (temp_df$Half_Sibs == TRUE),"Candidate_father_ID"])
par_sum_stat_df[mat,7] <- length(unique(temp_df[(temp_df$MT_ID == mat_ids[[mat]]) & (temp_df$Half_Sibs == TRUE),"Candidate_father_ID"]))
if(par_sum_stat_df[mat,2] == 0){
par_sum_stat_df[mat,8] <- 0
par_sum_stat_df[mat,9] <- 0
par_sum_stat_df[mat,10] <- 0
par_sum_stat_df[mat,11] <- 0
}else{
par_sum_stat_df[mat,8] <- min(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]),"dist_par"])
par_sum_stat_df[mat,9] <- max(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]),"dist_par"])
#recode hybrid status of min distance
par_sum_stat_df[mat,10] <- length(temp_df[temp_df$dist_par == min(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]),"dist_par"]) & temp_df$Hybrid_Status == TRUE,"Candidate_Father_Species"])
#recode hybrid status of min distance
par_sum_stat_df[mat,11] <- length(temp_df[temp_df$dist_par == max(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]),"dist_par"]) & temp_df$Hybrid_Status == TRUE,"Candidate_Father_Species"])
}
# #add colnames
colnames(par_sum_stat_df) <- c("MT_ID", "Off_N",
"Fathers_N", "Hybrid_Off_N",
"Hybrid_Father_N", "Half_Sib_Off_N",
"Half_Sib_Father_N", "Min_Dist", "Max_Dist",
"Hybrid_Min", "Hybrid_Max")
# #write out summary data frame with scenario
write.csv(par_sum_stat_df, paste0("Results/Parentage_Results/CSV_Files/", full_scen[[par]], '_par_sum_stat_df.csv'),
row.names = FALSE)
}
}
UHA_res_df %>%
ggplot(aes(x = fct_infreq(Candidate_father_ID2))) +
geom_bar(aes(fill = `Candidate Father Species`)) +
scale_fill_manual(values=c("darkseagreen4", "deepskyblue3", "goldenrod3","lightgoldenrod1")) +
geom_text(data = . %>% count(Candidate_father_ID2),
aes(label = paste("n =", n), y = 24), vjust = -3,
size = 3) +
scale_y_continuous(limits = c(0,35)) +  # set limits for graph
xlab("Candidate Father ID") + ylab("Offspring Count") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
#replace column text for candidate father species
UHA_res_df[["Candidate Father Species"]] <- as.factor(UHA_res_df$Candidate_Father_Species)
levels(UHA_res_df$`Candidate Father Species`)[[1]] <- "Quercus x deamii"
#make a factor column to enable easier counting of the fathers
UHA_res_df$Candidate_father_ID2 <- as.factor(UHA_res_df$Candidate_father_ID)
#write out count by father figure
png(paste0("Results/Parentage_Results/Figures/AL_HCF_count_by_father.png"),
res = 600, width = 5200, height = 3500)
UHA_res_df %>%
ggplot(aes(x = fct_infreq(Candidate_father_ID2))) +
geom_bar(aes(fill = `Candidate Father Species`)) +
scale_fill_manual(values=c("darkseagreen4", "deepskyblue3", "goldenrod3","lightgoldenrod1")) +
geom_text(data = . %>% count(Candidate_father_ID2),
aes(label = paste("n =", n), y = 24), vjust = -3,
size = 3) +
scale_y_continuous(limits = c(0,35)) +  # set limits for graph
xlab("Candidate Father ID") + ylab("Offspring Count") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
dev.off()
UHA_res_df %>%
ggplot(aes(x = fct_infreq(Candidate_father_ID2))) +
geom_bar(aes(fill = `Candidate Father Species`)) +
scale_fill_manual(values=c("deepskyblue3", "goldenrod3","darkseagreen4","lightgoldenrod1")) +
geom_text(data = . %>% count(Candidate_father_ID2),
aes(label = paste("n =", n), y = 24), vjust = -3,
size = 3) +
scale_y_continuous(limits = c(0,35)) +  # set limits for graph
xlab("Candidate Father ID") + ylab("Offspring Count") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
#write out count by father figure
png(paste0("Results/Parentage_Results/Figures/AL_HCF_count_by_father.png"),
res = 600, width = 5200, height = 3500)
UHA_res_df %>%
ggplot(aes(x = fct_infreq(Candidate_father_ID2))) +
geom_bar(aes(fill = `Candidate Father Species`)) +
scale_fill_manual(values=c("deepskyblue3", "goldenrod3","darkseagreen4","lightgoldenrod1")) +
geom_text(data = . %>% count(Candidate_father_ID2),
aes(label = paste("n =", n), y = 24), vjust = -3,
size = 3) +
scale_y_continuous(limits = c(0,35)) +  # set limits for graph
xlab("Candidate Father ID") + ylab("Offspring Count") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
dev.off()
#create count df
cf_list <- unique(UHA_res_df$Candidate_father_ID)
#set up data frame
count_df <- matrix(nrow = length(cf_list),
ncol = 4)
#first column - candidate father list
count_df[,1] <- cf_list
#loop over all cases
for(cf in seq_along(cf_list)){
#second column - count
count_df[cf,2] <- length(UHA_res_df[UHA_res_df$Candidate_father_ID == cf_list[[cf]],"Offspring_ID"])
#add in dbh
count_df[cf,3] <- unique(UHA_res_df[UHA_res_df$Candidate_father_ID == cf_list[[cf]],"DBH_avg"])
#add in species ID
count_df[cf,4] <- unique(UHA_res_df[UHA_res_df$Candidate_father_ID == cf_list[[cf]],"Candidate_Father_Species"])
}
View(par_sum_df)
View(UHA_database)
View(UHA_res_df)
