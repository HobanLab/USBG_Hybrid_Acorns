#loop over four scenarios
for(sc in 1:length(full_scen)){
#store temporary data frame
par_temp_df <- par_sum_df_list[[sc]]
#replace periods with underscores
colnames(par_temp_df) <- gsub("\\.", "_", colnames(par_temp_df))
#join maternal information with the parentage summary
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Mother_ID' = 'Tissue_ID'))
#rename the species data frame to the maternal species
par_temp_df <- par_temp_df %>% rename("Maternal_Species" = "Species",
"Maternal_Longitude" = "Longitude",
"Maternal_Latitude" = "Latitude",
"Maternal_Accession" = "Accession_Number")
##reorg data frame
#Adding in Species Information for Maternal and Paternal trees
keep_col_ID <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude",
"Maternal_Latitude", "Maternal_Accession")
# Narrowing the data again after the join of data sets
par_temp_df <- par_temp_df[keep_col_ID]
#add paternal information
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Candidate_father_ID' = 'Tissue_ID'))
#rename columns
par_temp_df <- par_temp_df %>% rename('Candidate_Father_Species' = 'Species',
"Candidate_Father_Longitude" = "Longitude",
"Candidate_Father_Latitude" = "Latitude",
"Candidate_Father_Accession" = "Accession_Number")
#reduce by empty columns
keep_col_ID2 <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude", "Maternal_Latitude",
"Maternal_Accession", "Candidate_Father_Species",
"Candidate_Father_Longitude", "Candidate_Father_Latitude",
"Candidate_Father_Accession")
#reduce data frame by populated columns
par_temp_df <- par_temp_df[keep_col_ID2]
###do half sibling analysis
##Mikaely Evans' code
#initialize columns in the data frame
par_temp_df$Half_Sibs <- NA  # Made three new columns for this analysis
par_temp_df$M_Accession_Abrv <- NA
par_temp_df$F_Accession_Abrv <- NA
#Abbreviating the accession numbers for the maternal and paternal trees was necessary to assign half sibling status because it is only necessary to look at the first 6 characters in the accession number to know if the trees came from the same lineage.
par_temp_df$M_Accession_Abrv <- substr(par_temp_df$Maternal_Accession, 0, 6)
#This line adds the Maternal accession abbreviation to the M_Accession_Abrv column
par_temp_df$F_Accession_Abrv <- substr(par_temp_df$Candidate_Father_Accession, 0, 6)
#This line adds the paternal accession abbreviation to the F_Accession_Abrv column
par_temp_df <- par_temp_df %>%
mutate("Half_Sibs" = case_when(M_Accession_Abrv == F_Accession_Abrv ~ TRUE,
M_Accession_Abrv != F_Accession_Abrv ~ FALSE))
##Add geographic information
#create a column for distance between mom and dad
par_temp_df$dist_par <- NA
#loop to calculate distance between parents
for(dist in 1:nrow(par_temp_df)){
par_temp_df$dist_par[dist] <- distm(par_temp_df[dist,5:6],
par_temp_df[dist,9:10],
fun=distGeo)
}
###Code to add hybrid status
par_temp_df$Hybrid_Status <- NA
par_temp_df <- par_temp_df %>%
mutate(Hybrid_Status = case_when(Maternal_Species == Candidate_Father_Species ~ FALSE,
Maternal_Species != Candidate_Father_Species ~ TRUE))
#write to file
write.csv(par_temp_df, paste0("Data_Files/CSV_Files/UHA_",full_scen[[sc]], "_analysis_df.csv"),
row.names = FALSE)
}
library(tidyverse)
library(ggplot2)
#set working directory
setwd("../..")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
install.packages("Demerelate")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/eschumacher/Downloads/Demerelate_0.9.tar.gz", repos = NULL, type = "source")
library(tidyverse)
#set working directory
setwd("../../..")
#read in summary df for final figures
UHA_res_df <- read.csv("Results/Parentage_Results/CSV_Files/UHA_HCF_all_loci_analysis_df.csv")
#reorg list to fit order
par_sum_df <- list(par_sum_df[[3]], par_sum_df[[1]],
par_sum_df[[4]], par_sum_df[[2]])
#list out analysis data frames
par_sum_analysis <- list.files(path = "Results/Parentage_Results/CSV_Files",
pattern = "analysis_df")
#order list
par_sum_analysis <- c(par_sum_analysis[[1]], par_sum_analysis[[2]],
par_sum_analysis[[4]], par_sum_analysis[[3]])
setwd("C:/Users/eschumacher/Documents/GitHub/USBG_Hybrid_Acorns")
#read in summary df for final figures
UHA_res_df <- read.csv("Results/Parentage_Results/CSV_Files/UHA_HCF_all_loci_analysis_df.csv")
#load in list of parentage summary results CSVs
par_sum_df <- list.files(path = "Results/Parentage_Results/CSV_Files",
pattern = "par_sum.csv")
#reorg list to fit order
par_sum_df <- list(par_sum_df[[3]], par_sum_df[[1]],
par_sum_df[[4]], par_sum_df[[2]])
#list out analysis data frames
par_sum_analysis <- list.files(path = "Results/Parentage_Results/CSV_Files",
pattern = "analysis_df")
#order list
par_sum_analysis <- c(par_sum_analysis[[1]], par_sum_analysis[[2]],
par_sum_analysis[[4]], par_sum_analysis[[3]])
#load full scenario data frames
full_scen <- c("all_loci_AF", #all loci included with all father assignments
"all_loci_HCF", #all loci with only high confidence fathers included
"red_loci_AF", #reduced loci with all father assignments
"red_loci_HCF" #reduce loci with only high confidence father assignments included
)
#pull in UHA database
UHA_database <- read.csv("./Data_Files/CSV_Files/UHA_database_clean.csv")
#save out list of maternal IDs
mat_n_ids <- paste0("MT",1:11)
#list out the mt ids
mat_ids <- list()
for(mat in mat_n_ids){
mat_ids[[mat]] <- UHA_database[UHA_database$MT_ID == mat,"Tissue_ID"]
}
#create MT
UHA_res_df$MT_ID <- dplyr::case_when(
UHA_res_df$Maternal_ID == "UHA-0009" ~ "MT1",
UHA_res_df$Maternal_ID == "UHA-0010" ~ "MT2",
UHA_res_df$Maternal_ID == "UHA-0012" ~ "MT3",
UHA_res_df$Maternal_ID == "UHA-0013" ~ "MT4",
UHA_res_df$Maternal_ID == "UHA-0014" ~ "MT5",
UHA_res_df$Maternal_ID == "UHA-0015" ~ "MT6",
UHA_res_df$Maternal_ID == "UHA-0016" ~ "MT7",
UHA_res_df$Maternal_ID == "UHA-0257" ~ "MT8",
UHA_res_df$Maternal_ID == "UHA-0260" ~ "MT9",
UHA_res_df$Maternal_ID == "UHA-0261" ~ "MT10",
UHA_res_df$Maternal_ID == "UHA-0351" ~ "MT11"
)
#save as a factor
UHA_res_df$MT_ID <- as.factor(UHA_res_df$MT_ID)
UHA_res_df$MT_ID <- factor(UHA_res_df$MT_ID,
levels=c("MT1", "MT2", "MT3", "MT4",
"MT5","MT6","MT7","MT8",
"MT9","MT10","MT11"))
## add candidate father names
UHA_res_df$CF_ID <- dplyr::case_when(
UHA_res_df$Candidate_father_ID == "UHA-0011" ~ "CF1",
UHA_res_df$Candidate_father_ID == "UHA-0013" ~ "CF2",
UHA_res_df$Candidate_father_ID == "UHA-0015" ~ "CF3",
UHA_res_df$Candidate_father_ID == "UHA-0177" ~ "CF4",
UHA_res_df$Candidate_father_ID == "UHA-0224" ~ "CF5",
UHA_res_df$Candidate_father_ID == "UHA-0256" ~ "CF6",
UHA_res_df$Candidate_father_ID == "UHA-0257" ~ "MT8",
UHA_res_df$Candidate_father_ID == "UHA-0258" ~ "CF7",
UHA_res_df$Candidate_father_ID == "UHA-0259" ~ "CF8",
UHA_res_df$Candidate_father_ID == "UHA-0260" ~ "MT9",
UHA_res_df$Candidate_father_ID == "UHA-0261" ~ "MT10",
UHA_res_df$Candidate_father_ID == "UHA-0262" ~ "CF9",
UHA_res_df$Candidate_father_ID == "UHA-0263" ~ "CF10",
UHA_res_df$Candidate_father_ID == "UHA-0264" ~ "CF11",
UHA_res_df$Candidate_father_ID == "UHA-0265" ~ "CF12",
UHA_res_df$Candidate_father_ID == "UHA-0266" ~ "CF13",
UHA_res_df$Candidate_father_ID == "UHA-0267" ~ "CF14",
UHA_res_df$Candidate_father_ID == "UHA-0268" ~ "CF15",
UHA_res_df$Candidate_father_ID == "UHA-0269" ~ "CF16",
UHA_res_df$Candidate_father_ID == "UHA-0293" ~ "CF17",
UHA_res_df$Candidate_father_ID == "UHA-0303" ~ "CF18",
UHA_res_df$Candidate_father_ID == "UHA-0351" ~ "MT11",
UHA_res_df$Candidate_father_ID == "UHA-0476" ~ "CF19",
UHA_res_df$Candidate_father_ID == "UHA-0512" ~ "CF20"
)
##first, create a data frame to compare non-exclusion probablities
#create matrix to store non-exclusion probabilities
exc_prob_df <- matrix(nrow = length(par_sum_df),
ncol = 2)
UHA_father_df %>%
ggplot(aes(x = fct_rev(fct_reorder(Species, Count)), y = Count)) +
geom_col(fill="forestgreen") +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5) +
scale_y_continuous(limits = c(0,150)) +
theme_bw() +
labs(x="Candidate Father Species",y = "Number of Offspring") +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 1))
#create summary father data frame
UHA_father_df <- as.data.frame(table(UHA_res_df$Candidate_Father_Species))
#rename
colnames(UHA_father_df) <- c("Species", "Count")
#resort data frame
UHA_father_df <- UHA_father_df %>%
dplyr::arrange(across("Count",desc))
UHA_father_df %>%
ggplot(aes(x = fct_rev(fct_reorder(Species, Count)), y = Count)) +
geom_col(fill="forestgreen") +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5) +
scale_y_continuous(limits = c(0,150)) +
theme_bw() +
labs(x="Candidate Father Species",y = "Number of Offspring") +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 1))
UHA_res_df %>%
group_by(sum_relate) %>%  # group by half siblings to compare the status
ggplot(aes(x = MT_ID, y = dist_par, fill = sum_relate)) +
geom_boxplot(fill = "azure2")+
geom_jitter(aes(fill = sum_relate), width = 0.2, size = 3, shape = 21, color = "black") +
expand_limits(y = c(0, 800)) +  # set limits for graph
scale_fill_manual(values = c("cadetblue", "navy","white")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
dev.off()
UHA_res_df %>%
group_by(sum_relate) %>%  # group by half siblings to compare the status
ggplot(aes(x = MT_ID, y = dist_par, fill = sum_relate)) +
geom_boxplot(fill = "azure2")+
geom_jitter(aes(fill = sum_relate), width = 0.2, size = 3, shape = 21, color = "black") +
expand_limits(y = c(0, 800)) +  # set limits for graph
scale_fill_manual(values = c("cadetblue", "navy","white")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
UHA_res_df %>%
group_by(sum_relate) %>%  # group by half siblings to compare the status
ggplot(aes(x = MT_ID, y = dist_par, fill = sum_relate)) +
geom_boxplot(fill = "ghostwhite")+
geom_jitter(aes(fill = sum_relate), width = 0.2, size = 3, shape = 21, color = "black") +
expand_limits(y = c(0, 800)) +  # set limits for graph
scale_fill_manual(values = c("cadetblue", "navy","white")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
UHA_res_df %>%
group_by(sum_relate) %>%  # group by half siblings to compare the status
ggplot(aes(x = MT_ID, y = dist_par, fill = sum_relate)) +
geom_boxplot(fill = "gray92")+
geom_jitter(aes(fill = sum_relate), width = 0.2, size = 3, shape = 21, color = "black") +
expand_limits(y = c(0, 800)) +  # set limits for graph
scale_fill_manual(values = c("cadetblue", "navy","white")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
UHA_res_df %>%
group_by(sum_relate) %>%  # group by half siblings to compare the status
ggplot(aes(x = MT_ID, y = dist_par, fill = sum_relate)) +
geom_boxplot(fill = "gray92")+
geom_jitter(aes(fill = sum_relate), width = 0.2, size = 3, shape = 21, color = "black") +
expand_limits(y = c(0, 800)) +  # set limits for graph
scale_fill_manual(values = c("moccasin", "cornflowerblue","white")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
#graph of half-sibling matings group by maternal ID
pdf(paste0("Results/Parentage_Results/Figures/AL_HCF_dist_par_halfsib_relanl.pdf"),
width = 12, height = 8)
UHA_res_df %>%
group_by(sum_relate) %>%  # group by half siblings to compare the status
ggplot(aes(x = MT_ID, y = dist_par, fill = sum_relate)) +
geom_boxplot(fill = "gray92")+
geom_jitter(aes(fill = sum_relate), width = 0.2, size = 3, shape = 21, color = "black") +
expand_limits(y = c(0, 800)) +  # set limits for graph
scale_fill_manual(values = c("moccasin", "cornflowerblue","white")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
dev.off()
UHA_res_df %>%
group_by(sum_relate) %>%  # group by half siblings to compare the status
ggplot(aes(x = MT_ID, y = dist_par, fill = sum_relate)) +
geom_boxplot(fill = "gray92")+
geom_jitter(aes(fill = sum_relate), width = 0.2, size = 5, shape = 21, color = "black") +
expand_limits(y = c(0, 800)) +  # set limits for graph
scale_fill_manual(values = c("moccasin", "cornflowerblue","white")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
#graph of half-sibling matings group by maternal ID
pdf(paste0("Results/Parentage_Results/Figures/AL_HCF_dist_par_halfsib_relanl.pdf"),
width = 12, height = 8)
UHA_res_df %>%
group_by(sum_relate) %>%  # group by half siblings to compare the status
ggplot(aes(x = MT_ID, y = dist_par, fill = sum_relate)) +
geom_boxplot(fill = "gray92")+
geom_jitter(aes(fill = sum_relate), width = 0.2, size = 5, shape = 21, color = "black") +
expand_limits(y = c(0, 800)) +  # set limits for graph
scale_fill_manual(values = c("moccasin", "cornflowerblue","white")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.3))
dev.off()
library(tidyverse)
library(geosphere)
#set working directory
setwd("../../..")
#load in the tissue database, remove offspring which have no coordinates
UHA_database <- read.csv("Data_Files/CSV_Files/UHA_database_clean.csv")
#limit to one case right now
genotype_df <- read.csv("./Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Input_Files/UHA_AL_genotype_df.csv")
par_df <- read.csv("Results/Parentage_Results/CSV_Files/UHA_HCF_all_loci_analysis_df.csv")
setwd("C:/Users/eschumacher/Documents/GitHub/USBG_Hybrid_Acorns")
#load in the tissue database, remove offspring which have no coordinates
UHA_database <- read.csv("Data_Files/CSV_Files/UHA_database_clean.csv")
#limit to one case right now
genotype_df <- read.csv("./Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Input_Files/UHA_AL_genotype_df.csv")
par_df <- read.csv("Results/Parentage_Results/CSV_Files/UHA_HCF_all_loci_analysis_df.csv")
#remove offspring from the data frame - only modeling parents
UHA_par_df <- UHA_database %>%
filter(PO == "P")
#create data frame for offspring
offspring_df <- par_df %>%
filter(!is.na(Candidate_father_ID))
###Create data frames with distances
#Create a column of the crosses of every parent individual
all_potential_combo <- crossing(UHA_par_df$Tissue_ID,
UHA_par_df$Tissue_ID)
#rename columns
colnames(all_potential_combo) <- c("Parent_1", "Parent_2")
#remove rows where the parents are the same individual (selfing)
potential_combo_dedup <- filter(all_potential_combo, Parent_1 != Parent_2)
#make columns to store distance between parents and parent species
potential_combo_dedup$dist <- NA
potential_combo_dedup$Parent_1_species <- NA
potential_combo_dedup$Parent_2_species <- NA
#loop to calculate distance between parents
for(d in 1:nrow(potential_combo_dedup)){
#initialize first and second parent
Parent_1 <- potential_combo_dedup$Parent_1[d]
Parent_2 <- potential_combo_dedup$Parent_2[d]
#access the original tissue database via the parents
Parent_1_Database_row <- filter(UHA_database, Tissue_ID == Parent_1)
Parent_2_Database_row <- filter(UHA_database, Tissue_ID == Parent_2)
#use distGeo to get distance in m between the lat long points of the 2 parents
potential_combo_dedup$dist[d] <- distGeo(c(Parent_1_Database_row$Longitude, Parent_1_Database_row$Latitude),
c(Parent_2_Database_row$Longitude, Parent_2_Database_row$Latitude))
#record the species of both parents
potential_combo_dedup$Parent_1_species[d] <- Parent_1_Database_row$Species
potential_combo_dedup$Parent_2_species[d] <- Parent_2_Database_row$Species
}
#reorganize the combination data frame to fix species naming conventions and to
#have a hybrid column
potential_combo_info <- potential_combo_dedup %>%
mutate(Parent_1_species = str_replace_all(Parent_1_species, "Q.", "Quercus"),
Parent_2_species = str_replace_all(Parent_2_species, "Q.", "Quercus")) %>% #replace all instances of Q.
mutate(Parental_species_match = case_when(Parent_1_species == Parent_2_species ~ "Conspecific",
Parent_1_species != Parent_2_species ~ "Heterospecific")) #if the species of the two parents matches then they are conspecific, if not they are heterospecific
#list of maternal names
mom_IDs <- unique(par_df$Maternal_ID)
#filter combintation df by the possible mothers
relevant_potential_combos <- potential_combo_info %>%
filter(Parent_1 %in% mom_IDs)
#replaces relevant_parentage_results
#combine all columns for distance analysis
par_results_df <- left_join(par_df, select(relevant_potential_combos,
c(Parent_1, Parent_2, dist)),
join_by(Maternal_ID == Parent_1,
Candidate_father_ID == Parent_2))
############### Create data frames
# right now just taking the mean dist of successful dads vs possible dads
#create df that has the mean distance of the 5 closest real fathers to each
#maternal tree (without ties, only possible with slice_min, using
#that instead of top_n)
rf_mean_small_df <- par_results_df %>%
group_by(Maternal_ID) %>%
slice_min(dist, n =5, with_ties = FALSE) %>%
summarise(Mean_smallest_real_dists = mean(dist,
na.rm=TRUE))
#same as above but doing 5 farthest dists
rf_mean_large_df <- par_results_df %>%
group_by(Maternal_ID) %>%
slice_max(dist, n =5, with_ties = FALSE) %>%
summarise(Mean_largest_real_dists = mean(dist, na.rm=TRUE))
#create df that has the mean distance of the 5 closest possible
#fathers to each maternal tree (including those with less than 5 offspring)
#Note that I don't need to call distinct here because there is only
#one entry per mother/father combo
pf_mean_small_df <- relevant_potential_combos %>%
group_by(Parent_1, Parental_species_match) %>%
slice_min(dist, n =5, with_ties = FALSE) %>%
summarise(Mean_smallest_potential_dists = mean(dist,
na.rm=TRUE))
#same as abovebut with 5 farthest dists
pf_mean_large_df <- relevant_potential_combos %>%
group_by(Parent_1, Parental_species_match) %>%
slice_max(dist, n =5, with_ties = FALSE) %>%
summarise(Mean_largest_potential_dists = mean(dist,
na.rm=TRUE))
#summarize data by mean and min distance to real fathers and by proportion of
#offspring that are hybrids (with heterospecific fathers)
rf_df <- par_results_df %>%
group_by(Maternal_ID) %>%
summarise(Mean_real_dist = mean(dist, na.rm=TRUE),
Min_real_dist = min(dist, na.rm=TRUE),
Max_real_dist = max(dist, na.rm=TRUE),
Prop_hybrids = mean(Hybrid_Status, na.rm = TRUE)) %>%
left_join(., rf_mean_small_df, join_by(Maternal_ID == Maternal_ID)) %>% #add the Mean_smallest_dists data
left_join(., rf_mean_large_df, join_by(Maternal_ID == Maternal_ID)) #add the Mean_largest_dists data
# Make dataset ("potential_fathers_summary") containing all of the desired
#summarized categories from the possible combinations of mothers and fathers
#data (mean distance of potential fathers, minimum distance of potential fathers,
#mean distance of closest 5 potential fathers).
#NOTE: this is NOT based off of the offspring data meaning that the 5
#closest fathers will be unique and the mean distance to fathers will be
#unweighted (because we have no way to know potential fathers relative success
#(i.e. how many offspring they may produce)) summarize data from data
#with all combos of possible conspecific and heterospefic individuals with
#each real mom
pf_df <- relevant_potential_combos %>%
group_by(Parent_1, Parental_species_match) %>%
summarise(Mean_potential_dist = mean(dist, na.rm=TRUE),
Min_potential_dist = min(dist, na.rm=TRUE),
Max_potential_dist = max(dist, na.rm=TRUE))  %>%
left_join(., pf_mean_small_df, join_by(Parent_1 == Parent_1, Parental_species_match == Parental_species_match)) %>% #add the Mean_smallest_dists data
left_join(., pf_mean_large_df, join_by(Parent_1 == Parent_1, Parental_species_match == Parental_species_match)) %>% #add the Mean_largest_dists data
left_join(., select(rf_df, c(Maternal_ID, Prop_hybrids)), join_by(Parent_1 == Maternal_ID)) #add the proportion of hybrids had by each mother (from real_fathers_summary)
###create a data frame to save the adjusted R-squared and p-value
rf_hybrid_prop_dist_df <- matrix(nrow = 5, ncol = 2)
#save p-values and r-squared results
rf_hybrid_prop_dist_df[1,1] <- summary(lm(formula = Prop_hybrids~Mean_real_dist, data=rf_df))$adj.r.squared
rf_hybrid_prop_dist_df[1,2] <- summary(lm(formula = Prop_hybrids~Mean_real_dist, data=rf_df))$coefficients[2,4]
rf_hybrid_prop_dist_df[2,1] <- summary(lm(formula = Prop_hybrids~Min_real_dist, data=rf_df))$adj.r.squared
rf_hybrid_prop_dist_df[2,2] <- summary(lm(formula = Prop_hybrids~Min_real_dist, data=rf_df))$coefficients[2,4]
rf_hybrid_prop_dist_df[3,1] <- summary(lm(formula = Prop_hybrids~Max_real_dist, data=rf_df))$adj.r.squared
rf_hybrid_prop_dist_df[3,2] <- summary(lm(formula = Prop_hybrids~Max_real_dist, data=rf_df))$coefficients[2,4]
rf_hybrid_prop_dist_df[4,1] <- summary(lm(formula = Prop_hybrids~Mean_smallest_real_dists, data=rf_df))$adj.r.squared
rf_hybrid_prop_dist_df[4,2] <- summary(lm(formula = Prop_hybrids~Mean_smallest_real_dists, data=rf_df))$coefficients[2,4]
rf_hybrid_prop_dist_df[5,1] <- summary(lm(formula = Prop_hybrids~Mean_largest_real_dists, data=rf_df))$adj.r.squared
rf_hybrid_prop_dist_df[5,2] <- summary(lm(formula = Prop_hybrids~Mean_largest_real_dists, data=rf_df))$coefficients[2,4]
#add columns and row labels
rownames(rf_hybrid_prop_dist_df) <- c("Mean_Par_Dist", "Min_Par_Dist", "Max_Par_Dist",
"Mean_Smallest_Dist", "Mean_Largest_Dist")
colnames(rf_hybrid_prop_dist_df) <- c("R2", "p-value")
#create the table that will hold the results of the for loop with 3 columns: Mom, Dad, and dist
parents_dists_table_full <- tibble(Mom = character(), Dad = character(), dist = character())
for(i in 1:length(unique(relevant_potential_combos$Parent_1))){
parents_dists_table_small <- tibble(Mom = character(), Dad = character(), dist = character()) #make a small version of the final table that will be overwritten with each new mom
mom <- unique(relevant_potential_combos$Parent_1)[i]  #get the ID of the given mom
mom_specific_combos <- relevant_potential_combos %>%
filter(Parent_1 == mom) %>%  #filter all possible combos to only those with the given mom as Parent_1
filter(Parental_species_match == "Conspecific")  #filter all possible combos with the given mom to only those that are the same species as the given mom
possible_dads <- mom_specific_combos$Parent_2 #make a vector with a list of all of the possible dads by pulling the Parent_2 column of the mom_specific_combos df
dads <- sample(possible_dads, size=1000, replace=T)  #randomly draw 1000 samples from all possible dads with replacement
#a for loop that will loop through each of the 1000 sampled dads will make and add a row for the parents_dists_table_small
for(x in 1:length(dads)){
dad <- dads[x] #get the ID of the given dad
parent_combo_row_for_table <- tibble(Mom = NA, Dad = NA, dist = NA) #creating table that will be a single row and will be overwritten during each iteration of the loop
parent_combo_row_for_table$Mom <- mom #add ID of the given mom to table
parent_combo_row_for_table$Dad <- dad #add ID of the given dad to table
parent_combo_row_for_table$dist <- filter(mom_specific_combos, Parent_1 == mom & Parent_2 == dad)$dist #add dist from mom to dad in table (by matching the mom and dad's IDs to the mom_specific_combos df)
parents_dists_table_small <- rbind(parents_dists_table_small, parent_combo_row_for_table) #bind the row of the given dad to the  table of the given mom
}
parents_dists_table_full <- rbind(parents_dists_table_full, parents_dists_table_small)  #bind the table of the given given to the  table of all the moms
}
max(parents_dists_table_full$Dad)
max(parents_dists_table_full$Mon)
max(parents_dists_table_full$dist)
table(UHA_res_df$dist_par)
