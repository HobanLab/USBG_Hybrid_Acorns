##create a list of the parentage results data frames
par_res_list <- list(UHA_al_par, UHA_rl_par)
#create a list of scenarios
scen <- c("all_loci", "red_loci")
#loop to reduce the parental summary data frames for low confidence father assignments
for(sc in 1:length(scen)){
temp_df <- par_res_list[[sc]]
#first, join genotype files with parentage results
lcf_df  <- temp_df[((temp_df$Pair_LOD_score > 0) & (temp_df$Trio_LOD_score > 0)),]
#write out data frame
write.csv(lcf_df, paste0("Data_Files/CSV_Files/UHA_", scen[[sc]], "_LCF_par_sum.csv"))
}
#load in all parentage summary data frames
par_sum_list <- list.files(path = "Data_Files/CSV_Files/", pattern = "par_sum")
par_sum_df_list <- list()
#Loop over
for(df in par_sum_list){
par_sum_df_list[[df]] <- read.csv(paste0("Data_Files/CSV_Files/", df))
}
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/All_Loci/Input_Files/UHA_all_loci_genotype_df.csv")
#Reduced loci
rl_score_df <- read.csv("Analysis/Parentage_Analysis/Red_Loci/Input_Files/UHA_red_loci_genotype_df.csv")
#combine into a list
score_df_list <- list(al_score_df, rl_score_df)
off_df_list <- list()
for(o in 1:length(score_df_list)){
#limit data frame to just offspring for each scenario
off_df_list[[o]] <- score_df_list[[o]][score_df_list[[o]]$Parent_Offspring == "O",]
#rename "Tissue ID" to "Offspring_ID"
colnames(off_df_list[[o]])[1] <- "Offspring_ID"
}
#load UHA database
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#create a list of scenarios
scen <- c("all_loci", "red_loci")
#loop to reduce the parental summary data frames for low confidence father assignments
for(sc in 1:length(scen)){
temp_df <- par_res_list[[sc]]
#first, join genotype files with parentage results
lcf_df  <- temp_df[((temp_df$Pair_LOD_score > 0) & (temp_df$Trio_LOD_score > 0)),]
#write out data frame
write.csv(lcf_df, paste0("Data_Files/CSV_Files/UHA_", scen[[sc]], "_HCF_par_sum.csv"))
}
#load in all parentage summary data frames
par_sum_list <- list.files(path = "Data_Files/CSV_Files/", pattern = "par_sum")
par_sum_df_list <- list()
#Loop over
for(df in par_sum_list){
par_sum_df_list[[df]] <- read.csv(paste0("Data_Files/CSV_Files/", df))
}
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/All_Loci/Input_Files/UHA_all_loci_genotype_df.csv")
#Reduced loci
rl_score_df <- read.csv("Analysis/Parentage_Analysis/Red_Loci/Input_Files/UHA_red_loci_genotype_df.csv")
#combine into a list
score_df_list <- list(al_score_df, rl_score_df)
off_df_list <- list()
for(o in 1:length(score_df_list)){
#limit data frame to just offspring for each scenario
off_df_list[[o]] <- score_df_list[[o]][score_df_list[[o]]$Parent_Offspring == "O",]
#rename "Tissue ID" to "Offspring_ID"
colnames(off_df_list[[o]])[1] <- "Offspring_ID"
}
#load UHA database
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#load UHA database
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#all scenarios
full_scen <- c("HCF_all_loci", "all_loci",
"HCF_red_loci", "red_loci")
#loop over four scenarios
for(sc in 1:length(full_scen)){
#store temporary data frame
par_temp_df <- par_sum_df_list[[sc]]
#replace periods with underscores
colnames(par_temp_df) <- gsub("\\.", "_", colnames(par_temp_df))
#join maternal information with the parentage summary
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Mother_ID' = 'Tissue_ID'))
#rename the species data frame to the maternal species
par_temp_df <- par_temp_df %>% rename("Maternal_Species" = "Species",
"Maternal_Longitude" = "Longitude",
"Maternal_Latitude" = "Latitude",
"Maternal_Accession" = "Accession.Number")
##reorg data frame
#Adding in Species Information for Maternal and Paternal trees
keep_col_ID <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude",
"Maternal_Latitude", "Maternal_Accession")
# Narrowing the data again after the join of data sets
par_temp_df <- par_temp_df[keep_col_ID]
#add paternal information
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Candidate_father_ID' = 'Tissue_ID'))
#rename columns
par_temp_df <- par_temp_df %>% rename('Candidate_Father_Species' = 'Species',
"Candidate_Father_Longitude" = "Longitude",
"Candidate_Father_Latitude" = "Latitude",
"Candidate_Father_Accession" = "Accession.Number")
#reduce by empty columns
keep_col_ID2 <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude", "Maternal_Latitude",
"Maternal_Accession", "Candidate_Father_Species",
"Candidate_Father_Longitude", "Candidate_Father_Latitude",
"Candidate_Father_Accession")
#reduce data frame by populated columns
par_temp_df <- par_temp_df[keep_col_ID2]
###do half sibling analysis
##Mikaely Evans code
#initialize columns in the data frame
par_temp_df$Half_Sibs <- NA  # Made three new columns for this analysis
par_temp_df$M_Accession_Abrv <- NA
par_temp_df$F_Accession_Abrv <- NA
#Abbreviating the accession numbers for the maternal and paternal trees was necessary to assign half sibling status because it is only necessary to look at the first 6 characters in the accession number to know if the trees came from the same lineage.
par_temp_df$M_Accession_Abrv <- substr(par_temp_df$Maternal_Accession, 0, 6)
#This line adds the Maternal accession abbreviation to the M_Accession_Abrv column
par_temp_df$F_Accession_Abrv <- substr(par_temp_df$Candidate_Father_Accession, 0, 6)
#This line adds the paternal accession abbreviation to the F_Accession_Abrv column
par_temp_df <- par_temp_df %>%
mutate("Half_Sibs" = case_when(M_Accession_Abrv == F_Accession_Abrv ~ TRUE,
M_Accession_Abrv != F_Accession_Abrv ~ FALSE))
##Add geographic information
#create a column for distance between mom and dad
par_temp_df$dist_par <- NA
#loop to calculate distance between parents
for(dist in 1:nrow(par_temp_df)){
par_temp_df$dist_par[dist] <- distm(par_temp_df[dist,5:6],
par_temp_df[dist,9:10],
fun=distGeo)
}
###Code to add hybrid status
par_temp_df$Hybrid_Status <- NA
par_temp_df <- par_temp_df %>%
mutate(Hybrid_Status = case_when(Maternal_Species == Candidate_Father_Species ~ FALSE,
Maternal_Species != Candidate_Father_Species ~ TRUE))
#write to file
write.csv(par_temp_df, paste0("Data_Files/CSV_Files/UHA_",full_scen[[sc]], "_analysis_df.csv"),
row.names = FALSE)
}
###################################
#     Analyze Post Parentage      #
###################################
#sum df
null_all_comp_df <- matrix(nrow = length(all_loc_par_sum$Candidate_father_ID),
ncol = 3)
#all scenarios
full_scen <- c("HCF_all_loci", "all_loci",
"HCF_red_loci", "red_loci")
#loop over four scenarios
for(sc in 1:length(full_scen)){
#store temporary data frame
par_temp_df <- par_sum_df_list[[sc]]
#replace periods with underscores
colnames(par_temp_df) <- gsub("\\.", "_", colnames(par_temp_df))
#join maternal information with the parentage summary
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Mother_ID' = 'Tissue_ID'))
#rename the species data frame to the maternal species
par_temp_df <- par_temp_df %>% rename("Maternal_Species" = "Species",
"Maternal_Longitude" = "Longitude",
"Maternal_Latitude" = "Latitude",
"Maternal_Accession" = "Accession.Number")
##reorg data frame
#Adding in Species Information for Maternal and Paternal trees
keep_col_ID <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude",
"Maternal_Latitude", "Maternal_Accession")
# Narrowing the data again after the join of data sets
par_temp_df <- par_temp_df[keep_col_ID]
#add paternal information
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Candidate_father_ID' = 'Tissue_ID'))
#rename columns
par_temp_df <- par_temp_df %>% rename('Candidate_Father_Species' = 'Species',
"Candidate_Father_Longitude" = "Longitude",
"Candidate_Father_Latitude" = "Latitude",
"Candidate_Father_Accession" = "Accession.Number")
#reduce by empty columns
keep_col_ID2 <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude", "Maternal_Latitude",
"Maternal_Accession", "Candidate_Father_Species",
"Candidate_Father_Longitude", "Candidate_Father_Latitude",
"Candidate_Father_Accession")
#reduce data frame by populated columns
par_temp_df <- par_temp_df[keep_col_ID2]
###do half sibling analysis
##Mikaely Evans code
#initialize columns in the data frame
par_temp_df$Half_Sibs <- NA  # Made three new columns for this analysis
par_temp_df$M_Accession_Abrv <- NA
par_temp_df$F_Accession_Abrv <- NA
#Abbreviating the accession numbers for the maternal and paternal trees was necessary to assign half sibling status because it is only necessary to look at the first 6 characters in the accession number to know if the trees came from the same lineage.
par_temp_df$M_Accession_Abrv <- substr(par_temp_df$Maternal_Accession, 0, 6)
#This line adds the Maternal accession abbreviation to the M_Accession_Abrv column
par_temp_df$F_Accession_Abrv <- substr(par_temp_df$Candidate_Father_Accession, 0, 6)
#This line adds the paternal accession abbreviation to the F_Accession_Abrv column
par_temp_df <- par_temp_df %>%
mutate("Half_Sibs" = case_when(M_Accession_Abrv == F_Accession_Abrv ~ TRUE,
M_Accession_Abrv != F_Accession_Abrv ~ FALSE))
##Add geographic information
#create a column for distance between mom and dad
par_temp_df$dist_par <- NA
#loop to calculate distance between parents
for(dist in 1:nrow(par_temp_df)){
par_temp_df$dist_par[dist] <- distm(par_temp_df[dist,5:6],
par_temp_df[dist,9:10],
fun=distGeo)
}
###Code to add hybrid status
par_temp_df$Hybrid_Status <- NA
par_temp_df <- par_temp_df %>%
mutate(Hybrid_Status = case_when(Maternal_Species == Candidate_Father_Species ~ FALSE,
Maternal_Species != Candidate_Father_Species ~ TRUE))
#write to file
write.csv(par_temp_df, paste0("Data_Files/CSV_Files/UHA_",full_scen[[sc]], "_analysis_df.csv"),
row.names = FALSE)
}
library(tidyverse)
library(dplyr)
library(ggplot2)
library(geofi)
library(sf)
library(geosphere)
###########################
#     Load Data Files     #
###########################
#set working directory
setwd("../..")
#load parentage results - all loci = al
UHA_al_par <- read.csv("Analysis/Parentage_Analysis/All_Loci/Output_Files/all_loci_par_sum.csv",
row.names = NULL)
#remove periods from UHA data frame
colnames(UHA_al_par) <- gsub("\\.", "_", colnames(UHA_al_par))
#load parentage results - reduced loci = rl
UHA_rl_par <- read.csv("Analysis/Parentage_Analysis/Red_Loci/Output_Files/red_loci_par_sum.csv")
#remove periods from colnames
colnames(UHA_rl_par) <- gsub("\\.", "_", colnames(UHA_rl_par))
##create a list of the parentage results data frames
par_res_list <- list(UHA_al_par, UHA_rl_par)
#create a list of scenarios
scen <- c("all_loci", "red_loci")
#loop to reduce the parental summary data frames for low confidence father assignments
for(sc in 1:length(scen)){
temp_df <- par_res_list[[sc]]
#first, join genotype files with parentage results
lcf_df  <- temp_df[((temp_df$Pair_LOD_score > 0) & (temp_df$Trio_LOD_score > 0)),]
#write out data frame
write.csv(lcf_df, paste0("Data_Files/CSV_Files/UHA_", scen[[sc]], "_HCF_par_sum.csv"))
}
setwd("C:/Users/eschumacher/Documents/GitHub/USBGHybridAcornsREU2023")
#load parentage results - all loci = al
UHA_al_par <- read.csv("Analysis/Parentage_Analysis/All_Loci/Output_Files/all_loci_par_sum.csv",
row.names = NULL)
#remove periods from UHA data frame
colnames(UHA_al_par) <- gsub("\\.", "_", colnames(UHA_al_par))
#load parentage results - reduced loci = rl
UHA_rl_par <- read.csv("Analysis/Parentage_Analysis/Red_Loci/Output_Files/red_loci_par_sum.csv")
#remove periods from colnames
colnames(UHA_rl_par) <- gsub("\\.", "_", colnames(UHA_rl_par))
##create a list of the parentage results data frames
par_res_list <- list(UHA_al_par, UHA_rl_par)
#create a list of scenarios
scen <- c("all_loci", "red_loci")
#loop to reduce the parental summary data frames for low confidence father assignments
for(sc in 1:length(scen)){
temp_df <- par_res_list[[sc]]
#first, join genotype files with parentage results
lcf_df  <- temp_df[((temp_df$Pair_LOD_score > 0) & (temp_df$Trio_LOD_score > 0)),]
#write out data frame
write.csv(lcf_df, paste0("Data_Files/CSV_Files/UHA_", scen[[sc]], "_HCF_par_sum.csv"))
}
#load in all parentage summary data frames
par_sum_list <- list.files(path = "Data_Files/CSV_Files/", pattern = "par_sum")
par_sum_df_list <- list()
#Loop over
for(df in par_sum_list){
par_sum_df_list[[df]] <- read.csv(paste0("Data_Files/CSV_Files/", df))
}
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/All_Loci/Input_Files/UHA_all_loci_genotype_df.csv")
#Reduced loci
rl_score_df <- read.csv("Analysis/Parentage_Analysis/Red_Loci/Input_Files/UHA_red_loci_genotype_df.csv")
#combine into a list
score_df_list <- list(al_score_df, rl_score_df)
off_df_list <- list()
for(o in 1:length(score_df_list)){
#limit data frame to just offspring for each scenario
off_df_list[[o]] <- score_df_list[[o]][score_df_list[[o]]$Parent_Offspring == "O",]
#rename "Tissue ID" to "Offspring_ID"
colnames(off_df_list[[o]])[1] <- "Offspring_ID"
}
#load UHA database
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#all scenarios
full_scen <- c("HCF_all_loci", "all_loci",
"HCF_red_loci", "red_loci")
#loop over four scenarios
for(sc in 1:length(full_scen)){
#store temporary data frame
par_temp_df <- par_sum_df_list[[sc]]
#replace periods with underscores
colnames(par_temp_df) <- gsub("\\.", "_", colnames(par_temp_df))
#join maternal information with the parentage summary
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Mother_ID' = 'Tissue_ID'))
#rename the species data frame to the maternal species
par_temp_df <- par_temp_df %>% rename("Maternal_Species" = "Species",
"Maternal_Longitude" = "Longitude",
"Maternal_Latitude" = "Latitude",
"Maternal_Accession" = "Accession.Number")
##reorg data frame
#Adding in Species Information for Maternal and Paternal trees
keep_col_ID <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude",
"Maternal_Latitude", "Maternal_Accession")
# Narrowing the data again after the join of data sets
par_temp_df <- par_temp_df[keep_col_ID]
#add paternal information
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Candidate_father_ID' = 'Tissue_ID'))
#rename columns
par_temp_df <- par_temp_df %>% rename('Candidate_Father_Species' = 'Species',
"Candidate_Father_Longitude" = "Longitude",
"Candidate_Father_Latitude" = "Latitude",
"Candidate_Father_Accession" = "Accession.Number")
#reduce by empty columns
keep_col_ID2 <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude", "Maternal_Latitude",
"Maternal_Accession", "Candidate_Father_Species",
"Candidate_Father_Longitude", "Candidate_Father_Latitude",
"Candidate_Father_Accession")
#reduce data frame by populated columns
par_temp_df <- par_temp_df[keep_col_ID2]
###do half sibling analysis
##Mikaely Evans code
#initialize columns in the data frame
par_temp_df$Half_Sibs <- NA  # Made three new columns for this analysis
par_temp_df$M_Accession_Abrv <- NA
par_temp_df$F_Accession_Abrv <- NA
#Abbreviating the accession numbers for the maternal and paternal trees was necessary to assign half sibling status because it is only necessary to look at the first 6 characters in the accession number to know if the trees came from the same lineage.
par_temp_df$M_Accession_Abrv <- substr(par_temp_df$Maternal_Accession, 0, 6)
#This line adds the Maternal accession abbreviation to the M_Accession_Abrv column
par_temp_df$F_Accession_Abrv <- substr(par_temp_df$Candidate_Father_Accession, 0, 6)
#This line adds the paternal accession abbreviation to the F_Accession_Abrv column
par_temp_df <- par_temp_df %>%
mutate("Half_Sibs" = case_when(M_Accession_Abrv == F_Accession_Abrv ~ TRUE,
M_Accession_Abrv != F_Accession_Abrv ~ FALSE))
##Add geographic information
#create a column for distance between mom and dad
par_temp_df$dist_par <- NA
#loop to calculate distance between parents
for(dist in 1:nrow(par_temp_df)){
par_temp_df$dist_par[dist] <- distm(par_temp_df[dist,5:6],
par_temp_df[dist,9:10],
fun=distGeo)
}
###Code to add hybrid status
par_temp_df$Hybrid_Status <- NA
par_temp_df <- par_temp_df %>%
mutate(Hybrid_Status = case_when(Maternal_Species == Candidate_Father_Species ~ FALSE,
Maternal_Species != Candidate_Father_Species ~ TRUE))
#write to file
write.csv(par_temp_df, paste0("Data_Files/CSV_Files/UHA_",full_scen[[sc]], "_analysis_df.csv"),
row.names = FALSE)
}
library(tidyverse)
library(ggplot2)
#load parentage result dfs
par_scen_df_list <- list.files(path = "Data_Files/CSV_Files/",pattern = "analysis_df.csv")
#reorder
par_scen_df_list <- list(par_scen_df_list[[1]], par_scen_df_list[[2]],
par_scen_df_list[[4]], par_scen_df_list[[3]])
#load full scenario data frames
full_scen <- c("all_loci_AF", #all loci included with all father assignments
"all_loci_HCF", #all loci with only high confidence fathers included
"red_loci_AF", #reduced loci with all father assignments
"red_loci_HCF" #reduce loci with only high confidence father assignments included
)
#read in these files as CSVs
par_scen_df <- list()
for(df in 1:length(par_scen_df_list)){
par_scen_df[[df]] <- read.csv(paste0("Data_Files/CSV_Files/", par_scen_df_list[[df]]))
}
#plot bar graphs of the offspring count for each mother and which individual is the father
png(paste0("Results/Figures/", full_scen[[1]], "_CF_permom.png"),
res = 600, width = 5000, height = 3500)
dev.off()
#plot bar graphs of the offspring count for each mother and which individual is the father
png(paste0("Results/Figures/", full_scen[[1]], "_CF_permom.png"),
res = 600, width = 5000, height = 3500)
#load full scenario data frames
full_scen <- c("all_loci_AF", #all loci included with all father assignments
"all_loci_HCF", #all loci with only high confidence fathers included
"red_loci_AF", #reduced loci with all father assignments
"red_loci_HCF" #reduce loci with only high confidence father assignments included
)
#plot bar graphs of the offspring count for each mother and which individual is the father
png(paste0("Results/Figures/", full_scen[[1]], "_CF_permom.png"),
res = 600, width = 5000, height = 3500)
par_scen_df[[1]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
full_scen
#plot bar graphs of the offspring count for each mother and which individual is the father
png(paste0("Results/Figures/all_loci_AF_CF_permom.png"),res = 600, width = 5000, height = 3500)
par_scen_df[[1]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
par_scen_df[[1]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
#plot bar graphs of the offspring count for each mother and which individual is the father
png(paste0("Results/Figures/AL_CF_permom.png"),res = 600, width = 5000, height = 3500)
#plot bar graphs of the offspring count for each mother and which individual is the father
png("Results/Figures/AL_CF_permom.png", width = 5000, height = 3500)
par_scen_df[[1]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
par_scen_df[[2]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
par_scen_df[[2]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
par_scen_df[[3]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
png(paste0("Results/Figures/", full_scen[[4]], "_CF_permom.png"),
res = 600, width = 5000, height = 3500)
par_scen_df[[4]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
par_scen_df[[1]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
par_scen_df[[2]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
par_scen_df[[3]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
par_scen_df[[4]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
