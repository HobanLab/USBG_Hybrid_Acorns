geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(`Mother_ID`), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
mf_boxplot <- full_parentage %>%
group_by(c(`Mother_ID`)) %>% # Grouped by mother ID for analysis across maternal tree
filter(!is.na(`Candidate_father_ID`)) %>%
ggplot(aes(x = fct_rev(fct_infreq(`Mother_ID`)), y = distance_between_parents)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(`Mother_ID`), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
#boxplot of the mothers and fathers
pdf("Results/mothers_fathers.pdf")
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png")
mf_boxplot
dev.off()
?png
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", width = 600, height = 600)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", width = 200, height = 200)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", width = 400, height = 400)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", width = 1200, height = 1200)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", width = 500, height = 500)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", width = 600, height = 600)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", res = 600)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", res = 600,
width = 600, height = 600)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", res = 600,
width = 1200, height = 1200)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", res = 600,
width = 2500, height = 2500)
mf_boxplot
dev.off()
#boxplot of the mothers and fathers
png("Results/mothers_fathers.png", res = 600,
width = 3500, height = 3500)
mf_boxplot
dev.off()
View(full_parentage)
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half Siblings`)) %>%
ggplot(aes(x = `Mother_ID`, y = distance_between_parents,
fill=`Half Siblings`, col = `Half Siblings`)) +  # color and fill by half siblings so you can see the maternal trees who did and didn't mate with half siblings
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
theme_bw()
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate father ID`)) %>%
filter(!is.na(`Half Siblings`)) %>%
ggplot(aes(x = `Mother ID`, y = distance_between_parents,  fill=`Half Siblings`, col = `Half Siblings`)) +  # color and fill by half siblings so you can see the maternal trees who did and didn't mate with half siblings
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
theme_bw() +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half Siblings`)) %>%
ggplot(aes(x = `Mother ID`, y = distance_between_parents,
fill=`Half Siblings`, col = `Half Siblings`)) +  # color and fill by half siblings so you can see the maternal trees who did and didn't mate with half siblings
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
theme_bw() +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half Siblings`)) %>%
ggplot(aes(x = `Mother_ID`, y = distance_between_parents,
fill=`Half Siblings`, col = `Half Siblings`)) +  # color and fill by half siblings so you can see the maternal trees who did and didn't mate with half siblings
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
theme_bw() +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = `Mother_ID`, y = distance_between_parents,
fill=`Half_Sibs`, col = `Half_Sibs`)) +  # color and fill by half siblings so you can see the maternal trees who did and didn't mate with half siblings
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
theme_bw() +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = `Mother_ID`, y = distance_between_parents,
fill=`Half_Sibs`, col = `Half_Sibs`)) +  # color and fill by half siblings so you can see the maternal trees who did and didn't mate with half siblings
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(c("cadetblue", "navyblue")) +
theme_bw() +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, fill = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_fill_manual(values = c("cadetblue", "navyblue"))
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(full_parentage, aes(x = Mother_ID, y = distance_between_parents, fill = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_fill_manual(values = c("cadetblue", "navyblue"))
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, fill = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navyblue"))
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, fill = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navyblue")) +
theme_bw() +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, fill = Half_Sibs)) +
geom_jitter(width = 0.2, fill = c("cadetblue", "navy")) +
expand_limits(y = c(0, 650)) +  # set limits for graph
#scale_color_manual() +
theme_bw() +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual() +
theme_bw(values = c("cadetblue", "navy")) +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
theme_bw() +
labs(title = "Distance between parents grouped by half siblings",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
scale_fill_discrete(name = "Half Siblings") +
theme_bw()
#graph of half-sibling matings group by maternal ID
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
guides(fill=guide_legend(title="Half Siblings")) +
theme_bw()
#graph of half-sibling matings group by maternal ID
png("Results/half_sibs_jitter.png", res = 600,
width = 3500, height = 3500)
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
#graph of half-sibling matings group by maternal ID
png("Results/half_sibs_jitter.png", res = 600,
width = 4000, height = 3500)
full_parentage %>%
group_by(`Half Siblings`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
View(full_parentage)
#barplot of the percentage of hybrids
full_parentage %>%
group_by(Hybrid_Status)  # group by hybrids to compare the status
#barplot of the percentage of hybrids
full_parentage %>%
group_by(Hybrid_Status)  # group by hybrids to compare the status
ggplot(data = full_parentage, aes(x = fct_rev(fct_infreq(`Mother_ID`)),
y = distance_between_parents, color = Hybrid_Status)) +
expand_limits(y = c(0, 650)) +  # set limits for graph
theme_bw() +
geom_boxplot() +
labs(title = "Distance between parents grouped by Hybrid Offspring",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
ggplot(data = full_parentage, aes(x = fct_rev(fct_infreq(`Mother_ID`)),
y = distance_between_parents, fill = Hybrid_Status)) +
expand_limits(y = c(0, 650)) +  # set limits for graph
theme_bw() +
geom_boxplot() +
labs(title = "Distance between parents grouped by Hybrid Offspring",
y = "Distance between parents (m)", x = "Maternal Tree ID")  # set labels
?replace
full_parentage <- full_parentage %>%
mutate(Half_Sibs, case_when(FALSE, "Not Half Siblings"))
full_parentage <- full_parentage %>%
mutate(Half_Sibs,
case_when(Half_Sibs == FALSE, "Not Half Siblings"))
full_parentage %>%
mutate(Half_Sibs1 = case_when(Half_Sibs == FALSE ~ "Not Half Siblings",
TRUE ~ "Half Siblings")
)
full_parentage <- full_parentage %>%
mutate(Half_Sibs1 = case_when(Half_Sibs == FALSE ~ "Not Half Siblings",
TRUE ~ "Half Siblings")
)
View(full_parentage)
Half_Sibs %>%
group_by(`Half_Sibs1`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs1`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs1)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
full_parentage %>%
group_by(`Half_Sibs1`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs1`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs1)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
full_parentage %>%
group_by(`Half_Sibs1`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs1`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs1)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme(legend.text = "Parents Are")
f
full_parentage %>%
group_by(`Half_Sibs1`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Half_Sibs1`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = Half_Sibs1)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
labs(fill = "Parents Are")
#create a column for the renamed cases for half siblings
full_parentage <- full_parentage %>%
mutate(`Parents Are` = case_when(Half_Sibs == FALSE ~ "Not Half Siblings",
TRUE ~ "Half Siblings")
)
full_parentage %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Parents Are`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
labs(fill = "Parents Are")
#graph of half-sibling matings group by maternal ID
png("Results/half_sibs_jitter.png", res = 600,
width = 4000, height = 3500)
full_parentage %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Parents Are`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
labs(fill = "Parents Are")
dev.off()
full_parentage %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Parents Are`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
labs(fill = "Parents Are")
full_parentage %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Parents Are`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
p
p
#graph of half-sibling matings group by maternal ID
png("Results/half_sibs_jitter.png", res = 600,
width = 5000, height = 3500)
full_parentage %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
filter(!is.na(`Candidate_father_ID`)) %>%
filter(!is.na(`Parents Are`)) %>%
ggplot(aes(x = Mother_ID, y = distance_between_parents, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
#organize data frame for hybrid status
full_parentage <- full_parentage %>%
mutate(`Offspring Hybrid Status` = case_when(Hybrid_Status == FALSE ~ "Not Hybrid",
TRUE ~ "Hybrid"))
#barplot of the percentage of hybrids
ggplot(data = full_parentage, aes(x = fct_rev(fct_infreq(Mother_ID)),
y = distance_between_parents,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
expand_limits(y = c(0, 650)) +  # set limits for graph
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
#barplot of the percentage of hybrids
ggplot(data = full_parentage, aes(x = fct_rev(fct_infreq(Mother_ID)),
y = distance_between_parents,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
scale_color_manual(values = c("darkseagreen", "darkgreen"))
#barplot of the percentage of hybrids
ggplot(data = full_parentage, aes(x = fct_rev(fct_infreq(Mother_ID)),
y = distance_between_parents,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
scale_fill_manual(values = c("darkseagreen", "darkgreen"))
#barplot of the percentage of hybrids
ggplot(data = full_parentage, aes(x = fct_rev(fct_infreq(Mother_ID)),
y = distance_between_parents,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
scale_fill_manual(values = c("darkseagreen", "darkgreen")) +
expand_limits(y = c(0, 650)) +  # set limits for graph
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
#barplot of the percentage of hybrids
png("Results/hybrid_offpring.png", res = 600,
width = 5000, height = 3500)
ggplot(data = full_parentage, aes(x = fct_rev(fct_infreq(Mother_ID)),
y = distance_between_parents,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
scale_fill_manual(values = c("darkseagreen", "darkgreen")) +
expand_limits(y = c(0, 650)) +  # set limits for graph
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
View(full_parentage)
unique(full_parentage$Candidate_Father_Species)
#table to present the candidate fathers
species_count <- as.data.frame(table(full_parentage$Candidate_Father_Species))
names(species_count) <- c("Species", "Count")
species_count$Species <- factor(species_count$Species,
levels=species_count$Species[order(-species_count$Count)])
species_count
#now plot species count table
species_count %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat="identity") +
labs(title="Count of Candidate Father Trees per Species", x="Candidate Father Species") +
theme_minimal()
#now plot species count table
species_count %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat="identity", fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
#now plot species count table
species_count %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
#now plot species count table
species_count %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat = prop, fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
#now plot species count table
species_count %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat = "prop", fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
#now plot species count table
species_count %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
