geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
dev.off()
png(paste0("Results/Parentage_Figures/AL_HCF_dist_par.png", full_scen[[2]], "_dist_par.png"),
res = 600, width = 5000, height = 3500)
par_scen_df[[2]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
dev.off()
png(paste0("Results/Parentage_Figures/RL_ACF_dist_par.png", full_scen[[3]], "_dist_par.png"),
res = 600, width = 5000, height = 3500)
par_scen_df[[3]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
dev.off()
png(paste0("Results/Parentage_Figures/RL_HCF_dist_par.png", full_scen[[4]], "_dist_par.png"),
res = 600, width = 5000, height = 3500)
par_scen_df[[4]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
dev.off()
#plot bar graphs of the offspring count for each mother and which individual is the father
png("Results/Parentage_Figures/AL_ACF_permom.png", width = 5000, height = 3500,
res = 600)
par_scen_df[[1]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
#plot bar graphs of the offspring count for each mother and which individual is the father
png("Results/Parentage_Figures/AL_ACF_permom.png", width = 5000, height = 3500,
res = 600)
par_scen_df[[1]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
png("Results/Parentage_Figures/AL_HCF_permom.png",res = 600, width = 5000,
height = 3500)
par_scen_df[[2]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
png("Results/Parentage_Figures/RL_ACF_permom.png", res = 600, width = 5000,
height = 3500)
par_scen_df[[3]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
png("Results/Parentage_Figures/RL_HCF_permom.png",res = 600, width = 5000,
height = 3500)
par_scen_df[[4]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
library(tidyverse)
library(ggplot2)
#set working directory
setwd("../..")
#load parentage result dfs
par_scen_df_list <- list.files(path = "Data_Files/CSV_Files/",pattern = "analysis_df.csv")
#reorder
par_scen_df_list <- list(par_scen_df_list[[1]], par_scen_df_list[[2]],
par_scen_df_list[[4]], par_scen_df_list[[3]])
#load full scenario data frames
full_scen <- c("all_loci_AF", #all loci included with all father assignments
"all_loci_HCF", #all loci with only high confidence fathers included
"red_loci_AF", #reduced loci with all father assignments
"red_loci_HCF" #reduce loci with only high confidence father assignments included
)
#read in these files as CSVs
par_scen_df <- list()
for(df in 1:length(par_scen_df_list)){
par_scen_df[[df]] <- read.csv(paste0("Data_Files/CSV_Files/", par_scen_df_list[[df]]))
}
#plot bar graphs of the offspring count for each mother and which individual is the father
png("Results/Parentage_Figures/AL_ACF_permom.png", width = 5000, height = 3500,
res = 600)
setwd("C:/Users/eschumacher/Documents/GitHub/USBGHybridAcornsREU2023")
#load parentage result dfs
par_scen_df_list <- list.files(path = "Data_Files/CSV_Files/",pattern = "analysis_df.csv")
#reorder
par_scen_df_list <- list(par_scen_df_list[[1]], par_scen_df_list[[2]],
par_scen_df_list[[4]], par_scen_df_list[[3]])
#load full scenario data frames
full_scen <- c("all_loci_AF", #all loci included with all father assignments
"all_loci_HCF", #all loci with only high confidence fathers included
"red_loci_AF", #reduced loci with all father assignments
"red_loci_HCF" #reduce loci with only high confidence father assignments included
)
#read in these files as CSVs
par_scen_df <- list()
for(df in 1:length(par_scen_df_list)){
par_scen_df[[df]] <- read.csv(paste0("Data_Files/CSV_Files/", par_scen_df_list[[df]]))
}
#plot bar graphs of the offspring count for each mother and which individual is the father
png("Results/Parentage_Figures/AL_ACF_permom.png", width = 5000, height = 3500,
res = 600)
par_scen_df[[1]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
png("Results/Parentage_Figures/AL_HCF_permom.png",res = 600, width = 5000,
height = 3500)
par_scen_df[[2]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
png("Results/Parentage_Figures/RL_ACF_permom.png", res = 600, width = 5000,
height = 3500)
par_scen_df[[3]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
png("Results/Parentage_Figures/RL_HCF_permom.png",res = 600, width = 5000,
height = 3500)
par_scen_df[[4]] %>%
ggplot() +
geom_bar(aes(y = sort(Candidate_father_ID))) +
facet_wrap(~`Mother_ID`) +
scale_x_continuous(n.breaks = 9) +
labs(title = "Count of Offspring per Candidate Father and Maternal Tree Pairs",
y = "Candidate Father ID", x = "Count of Offspring")
dev.off()
###### Boxplot of distances between parents
png("Results/Parentage_Figures/AL_ACF_dist_par.png", res = 600, width = 5000,
height = 3500)
par_scen_df[[1]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
dev.off()
png("Results/Parentage_Figures/AL_HCF_dist_par.png",
res = 600, width = 5000, height = 3500)
par_scen_df[[2]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
dev.off()
png("Results/Parentage_Figures/RL_ACF_dist_par.png", res = 600, width = 5000,
height = 3500)
par_scen_df[[3]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
dev.off()
png("Results/Parentage_Figures/RL_HCF_dist_par.png", res = 600, width = 5000,
height = 3500)
par_scen_df[[4]] %>%
group_by(c(Mother_ID)) %>% #
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)), y = dist_par)) +  #This is making me think that I actually grouped it by count of occurrences lowest to highest instead of highest average distance between parents. As we discussed with Sean, the order is not that important.
expand_limits(y = c(0, 650)) +  # set limits for graph
#theme_minimal() +  # set theme
theme_bw() +  # set theme
geom_boxplot(fill="darkolivegreen4") +
geom_jitter(color = "grey", fill = "black", width = 0.3) +
geom_text(data = . %>% count(Mother_ID), aes(label = n, y = 645), vjust = -0.5) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)")
dev.off()
for(scen in 1:length(full_scen)){
par_scen_df[[scen]] <- par_scen_df[[scen]] %>%
mutate(`Parents Are` = case_when(Half_Sibs == FALSE ~ "Not Half Siblings",
TRUE ~ "Half Siblings",
NA ~ "No Accession Number")
)
}
#graph of half-sibling matings group by maternal ID
png("Results/Parentage_Figures/AL_ACF_dist_par.png", res = 600, width = 5000,
height = 3500)
par_scen_df[[1]] %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
ggplot(aes(x = Mother_ID, y = dist_par, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/AL_HCF_dist_par.png",
res = 600, width = 5000, height = 3500)
par_scen_df[[2]] %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
ggplot(aes(x = Mother_ID, y = dist_par, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/RL_ACF_dist_par.png",res = 600, width = 5000,
height = 3500)
par_scen_df[[3]] %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
ggplot(aes(x = Mother_ID, y = dist_par, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/RL_HCF_dist_par.png",
res = 600, width = 5000, height = 3500)
par_scen_df[[4]] %>%
group_by(`Parents Are`) %>%  # group by half siblings to compare the status
ggplot(aes(x = Mother_ID, y = dist_par, color = `Parents Are`)) +
geom_jitter(width = 0.2) +
expand_limits(y = c(0, 650)) +  # set limits for graph
scale_color_manual(values = c("cadetblue", "navy")) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
#loop to add hybrid status to data frame
for(scen in 1:length(full_scen)){
par_scen_df[[scen]] <- par_scen_df[[scen]] %>%
mutate(`Offspring Hybrid Status` = case_when(Hybrid_Status == FALSE ~ "Not Hybrid",
TRUE ~ "Hybrid"))
}
#####barplots of the percentage of hybrids
png("Results/Parentage_Figures/AL_ACF_hybrid.png",
res = 600, width = 5000, height = 3500)
par_scen_df[[1]] %>%
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)),
y = dist_par,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
scale_fill_manual(values = c("darkseagreen", "darkgreen")) +
expand_limits(y = c(0, 650)) +  # set limits for graph
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/AL_HCF_hybrid.png",
res = 600, width = 5000, height = 3500)
par_scen_df[[2]] %>%
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)),
y = dist_par,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
scale_fill_manual(values = c("darkseagreen", "darkgreen")) +
expand_limits(y = c(0, 650)) +  # set limits for graph
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/RL_ACF_hybrid.png",
res = 600, width = 5000, height = 3500)
par_scen_df[[3]] %>%
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)),
y = dist_par,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
scale_fill_manual(values = c("darkseagreen", "darkgreen")) +
expand_limits(y = c(0, 650)) +  # set limits for graph
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/RL_HCF_hybrid.png",
res = 600, width = 5000, height = 3500)
par_scen_df[[4]] %>%
ggplot(aes(x = fct_rev(fct_infreq(Mother_ID)),
y = dist_par,
fill = `Offspring Hybrid Status`)) +
geom_boxplot() +
scale_fill_manual(values = c("darkseagreen", "darkgreen")) +
expand_limits(y = c(0, 650)) +  # set limits for graph
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw()
dev.off()
##create a list for
#table to present the candidate fathers
species_count_list <- list()
#loop to create species count lists for parent assignments
for(scen in 1:length(full_scen)){
#create a data frame
species_count_list[[scen]] <- as.data.frame(table(par_scen_df[[scen]]$Candidate_Father_Species))
#rename columns
names(species_count_list[[scen]]) <- c("Species", "Count")
#organize data frame
species_count_list[[scen]]$Species <- factor(species_count_list[[scen]]$Species,
levels=species_count_list[[scen]]$Species[order(-species_count_list[[scen]]$Count)])
}
#now plot species count table
png("Results/Parentage_Figures/AL_ACF_species_count.png",
res = 600, width = 5000, height = 3500)
species_count_list[[1]] %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/AL_HCF_species_count.png",
res = 600, width = 5000, height = 3500)
species_count_list[[2]] %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/RL_ACF_species_count.png",
res = 600, width = 5000, height = 3500)
species_count_list[[3]] %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
dev.off()
png("Results/Parentage_Figures/RL_HCF_species_count.png",
res = 600, width = 5000, height = 3500)
species_count_list[[4]] %>%
ggplot(aes(x = Species, y=Count))+
geom_bar(stat = "identity", fill = "darkgreen") +
labs(title="Count of Candidate Father Trees per Species",
x="Candidate Father Species") +
theme_bw()
dev.off()
#load in the tissue database, remove offspring which have no coordinates
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#read in cleaned data file
UHA_score_clean_df <- read.csv("Data_Files/CSV_Files/UHA_score_clean_df.csv")
#load in parentage results
parentage_results <- read.csv("Data_Files/CSV_Files/UHA_full_parentage.csv")
#load in parentage results
parentage_results <- read.csv("Data_Files/CSV_Files/UHA_all_loci_analysis_df.csv")
###################################
#     Reorganize data frames      #
###################################
#remove individuals with too much missing data
UHA_clean_df <- UHA_database[UHA_database$Tissue_ID %in% UHA_score_clean_df$Tissue_ID,]
UHA_score_clean_df$Tissue_ID
###################################
#     Reorganize data frames      #
###################################
#remove individuals with too much missing data
UHA_clean_df <- UHA_database[UHA_database$Tissue_ID %in% UHA_score_clean_df$Tissue.ID,]
#list files
list.files(path = "Data_Files/CSV_Files", pattern = "analysis_df")
###load parentage result dfs
#List out data files
par_scen_df_list <- list.files(path = "Data_Files/CSV_Files/",pattern = "analysis_df.csv")
#reorder
par_scen_df_list <- list(par_scen_df_list[[1]], par_scen_df_list[[2]],
par_scen_df_list[[4]], par_scen_df_list[[3]])
#load full scenario data frames
full_scen <- c("all_loci_AF", #all loci included with all father assignments
"all_loci_HCF", #all loci with only high confidence fathers included
"red_loci_AF", #reduced loci with all father assignments
"red_loci_HCF" #reduce loci with only high confidence father assignments included
)
#read in these files as CSVs
par_scen_df <- list()
for(df in 1:length(par_scen_df_list)){
par_scen_df[[df]] <- read.csv(paste0("Data_Files/CSV_Files/", par_scen_df_list[[df]]))
}
temp_par_df <- par_scen_df[[1]]
#load in score data frames
score_df_list <- list.files(path = "Data_Files/CSV_Files",
pattern = "genotype_df")
#load in score data frames
score_df <- list.files(path = "Data_Files/CSV_Files",
pattern = "genotype_df")
#loop in the score data frames
score_df_list <- list()
#load in score data frames
score_df <- list.files(path = "Data_Files/CSV_Files",
pattern = "genotype_df")
#loop in the score data frames
score_df_list <- list()
for(sc_df in score_df){
#read csvs
score_df_list[[sc_df]] <- read.csv(paste0("Data_Files/CSV_Files/", score_df))
}
score_df
for(sc_df in seq_along(score_df)){
#read csvs
score_df_list[[sc_df]] <- read.csv(paste0("Data_Files/CSV_Files/", score_df[[sc_df]]))
}
temp_score_df <- par_scen_df[[1]]
#clean analysis data frame
UHA_clean_df <- UHA_database[UHA_database$Tissue_ID %in% temp_par_df$Offspring_ID,]
temp_score_df <- score_df_list[[1]]
#clean analysis data frame
UHA_clean_df <- UHA_database[UHA_database$Tissue_ID %in% temp_score_df$Offspring_ID,]
#loop in the score data frames
score_df_list <- list()
for(sc_df in seq_along(score_df)){
#read csvs
score_df_list[[sc_df]] <- read.csv(paste0("Data_Files/CSV_Files/", score_df[[sc_df]]))
}
temp_score_df <- score_df_list[[1]]
#clean analysis data frame
UHA_clean_df <- UHA_database[UHA_database$Tissue_ID %in% temp_score_df$Tissue_ID,]
#remove offspring from the data frame
UHA_par_df <- UHA_clean_df %>%
filter(!is.na(Longitude) | !is.na(Latitude))
261+155
View(UHA_clean_df)
length(UHA_database[UHA_database$Parent.or.offspring...P.O. == "P",]$Tissue_ID)
length(UHA_clean_df[UHA_clean_df$Parent.or.offspring...P.O. == "P",]$Tissue_ID)
263-155
263+155
length(UHA_clean_df[UHA_clean_df$Parent.or.offspring...P.O. == "O",]$Tissue_ID)
#load in score data frames
score_df <- list.files(path = "Data_Files/CSV_Files",
pattern = "genotype_df")
#loop in the score data frames
score_df_list <- list()
for(sc_df in seq_along(score_df)){
#read csvs
score_df_list[[sc_df]] <- read.csv(paste0("Data_Files/CSV_Files/", score_df[[sc_df]]))
}
temp_score_df <- score_df_list[[1]]
length(temp_score_df[temp_score_df$Parent_Offspring == "O", "Tissue_ID"])
#load in the tissue database, remove offspring which have no coordinates
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#clean analysis data frame
UHA_clean_df <- UHA_database[UHA_database$Tissue_ID %in% temp_score_df$Tissue_ID,]
#load in the tissue database, remove offspring which have no coordinates
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
length(UHA_database[UHA_database$Parent.or.offspring...P.O. == "O",]$Tissue_ID)
length(UHA_database[UHA_database$Parent.or.offspring...P.O. == "P",]$Tissue_ID)
155+262
#load in the tissue database, remove offspring which have no coordinates
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#load in the tissue database, remove offspring which have no coordinates
UHA_database <- read.csv("Data_Files/CSV_Files/ARCHIVED_USBG_Hybrid_Acorn_Tissue_Database.csv")
#remove offspring from the data frame
UHA_par_df <- UHA_database %>%
filter(Parent_Offspring == "O")
#remove offspring from the data frame
UHA_par_df <- UHA_database %>%
filter(Parent_Offspring == "P")
262+155
par_df <- read.csv("Data_Files/CSV_Files/UHA_all_loci_analysis_df.csv")
#update parentage analysis df
UHA_clean_par_df <- par_df %>%
rename(Father_ID = Candidate_father_ID) %>%
filter(!is.na(Father_ID))
View(UHA_clean_par_df)
offspring_df <- par_df %>%
filter(!is.na(Father_ID))
offspring_df <- par_df %>%
filter(!is.na(Candidate_father_ID))
