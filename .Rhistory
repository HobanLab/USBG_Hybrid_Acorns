par_sum_list
#read CSVs
par_sum_df_list <- list()
#Loop over to read in all summary parentage data frame results
for(df in seq_along(par_sum_list)){
#now save parsum list
par_sum_df_list[[df]] <- read.csv(paste0("./Results/Parentage_Results/CSV_Files/",
par_sum_list[[df]]))
}
##load score data frames
#All loci
al_score_df <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/All_Loci/Input_Files/UHA_AL_genotype_df.csv")
#Reduced loci
rl_score_df <- read.csv("Analysis/Parentage_Analysis/CERVUS_Files/Red_Loci/Input_Files/UHA_RL_genotype_df.csv")
#combine into a list
score_df_list <- list(al_score_df, rl_score_df)
off_df_list <- list()
for(o in 1:length(score_df_list)){
#limit data frame to just offspring for each scenario
off_df_list[[o]] <- score_df_list[[o]][score_df_list[[o]]$Parent_Offspring == "O",]
#rename "Tissue ID" to "Offspring_ID"
colnames(off_df_list[[o]])[1] <- "Offspring_ID"
}
#save relate df
UHA_relate <- read.csv("./Data_Files/CSV_Files/UHA_spatial_distance_analysis.csv")
#load UHA database
UHA_database <- read.csv("Data_Files/CSV_Files/UHA_database_clean.csv")
#all scenarios
full_scen <- c("all_loci", "HCF_all_loci",
"red_loci", "HCF_red_loci")
#loop over four scenarios
for(sc in seq_along(full_scen)){
#store temporary data frame
par_temp_df <- par_sum_df_list[[sc]]
#replace periods with underscores
colnames(par_temp_df) <- gsub("\\.", "_", colnames(par_temp_df))
#join maternal information with the parentage summary
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Mother_ID' = 'Tissue_ID'))
#rename the species data frame to the maternal species
par_temp_df <- par_temp_df %>% rename("Maternal_Species" = "Species",
"Maternal_Longitude" = "Longitude",
"Maternal_Latitude" = "Latitude",
"Maternal_Accession" = "Accession_Number")
##reorg data frame
#Adding in Species Information for Maternal and Paternal trees
keep_col_ID <- c("Offspring_ID","Mother_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude",
"Maternal_Latitude", "Maternal_Accession","MT_ID")
# Narrowing the data again after the join of data sets
par_temp_df <- par_temp_df[keep_col_ID]
#add paternal information
par_temp_df <- left_join(par_temp_df, UHA_database,
by=c('Candidate_father_ID' = 'Tissue_ID'))
#replace periods with underscores
colnames(par_temp_df) <- gsub("\\.", "_", colnames(par_temp_df))
#rename columns
par_temp_df <- par_temp_df %>% rename('Candidate_Father_Species' = 'Species',
"Candidate_Father_Longitude" = "Longitude",
"Candidate_Father_Latitude" = "Latitude",
"Candidate_Father_Accession" = "Accession_Number",
"Maternal_ID" = "Mother_ID",
"DBH1_Paternal" = "DBH1",
"DBH2_Paternal" = "DBH2",
"DBH3_Paternal" = "DBH3",
"DBH4_Paternal" = "DBH4")
#reduce by empty columns
keep_col_ID2 <- c("Offspring_ID","Maternal_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude", "Maternal_Latitude",
"Maternal_Accession", "Candidate_Father_Species",
"Candidate_Father_Longitude", "Candidate_Father_Latitude",
"Candidate_Father_Accession", "DBH1_Paternal", "DBH2_Paternal",
"DBH3_Paternal", "DBH4_Paternal","DBH_avg")
#reduce data frame by populated columns
par_temp_df <- par_temp_df[keep_col_ID2]
###do half sibling analysis
##Mikaely Evans' code
#initialize columns in the data frame
par_temp_df$Half_Sibs <- NA  # Made three new columns for this analysis
par_temp_df$M_Accession_Abrv <- NA
par_temp_df$F_Accession_Abrv <- NA
#Abbreviating the accession numbers for the maternal and paternal trees was necessary to assign half sibling status because it is only necessary to look at the first 6 characters in the accession number to know if the trees came from the same lineage.
par_temp_df$M_Accession_Abrv <- substr(par_temp_df$Maternal_Accession, 0, 6)
#This line adds the Maternal accession abbreviation to the M_Accession_Abrv column
par_temp_df$F_Accession_Abrv <- substr(par_temp_df$Candidate_Father_Accession, 0, 6)
#This line adds the paternal accession abbreviation to the F_Accession_Abrv column
par_temp_df <- par_temp_df %>%
mutate("Half_Sibs" = case_when(M_Accession_Abrv == F_Accession_Abrv ~ TRUE,
M_Accession_Abrv != F_Accession_Abrv ~ FALSE))
#reduce by empty columns
keep_col_ID2 <- c("Offspring_ID","Maternal_ID", "Candidate_father_ID",
"Maternal_Species", "Maternal_Longitude", "Maternal_Latitude",
"Maternal_Accession", "Candidate_Father_Species",
"Candidate_Father_Longitude", "Candidate_Father_Latitude",
"Candidate_Father_Accession", "Half_Sibs", "M_Accession_Abrv",
"F_Accession_Abrv","DBH_avg")
#reduce data frame by populated columns
par_temp_df <- par_temp_df[keep_col_ID2]
#compare to the UHA relate
par_temp_df <- dplyr::left_join(par_temp_df, UHA_relate,
by = c("Maternal_ID" = "Ind1",
"Candidate_father_ID" = "Ind2"))
par_temp_df <- dplyr::left_join(par_temp_df, UHA_relate,
by = c("Candidate_father_ID" = "Ind1",
"Maternal_ID" = "Ind2"))
#compare half-sib coeff status and accession number
par_temp_df$comp_status <- dplyr::case_when(
par_temp_df$Half_Sibs == TRUE & par_temp_df$relate_coef.x >= 0.25 ~ 1,
par_temp_df$Half_Sibs == TRUE & par_temp_df$relate_coef.y >= 0.25 ~ 1,
par_temp_df$Half_Sibs == TRUE & par_temp_df$relate_coef.x < 0.25 ~ 2,
par_temp_df$Half_Sibs == TRUE & par_temp_df$relate_coef.y < 0.25 ~ 2,
par_temp_df$Half_Sibs == FALSE & par_temp_df$relate_coef.x >= 0.25 ~ 3,
par_temp_df$Half_Sibs == FALSE & par_temp_df$relate_coef.y >= 0.25 ~ 3,
par_temp_df$Half_Sibs == FALSE & par_temp_df$relate_coef.x < 0.25 ~ 4,
par_temp_df$Half_Sibs == FALSE & par_temp_df$relate_coef.y < 0.25 ~ 4
)
##Add geographic information
#create a column for distance between mom and dad
par_temp_df$dist_par <- NA
#loop to calculate distance between parents
for(dist in 1:nrow(par_temp_df)){
par_temp_df$dist_par[dist] <- distm(par_temp_df[dist,5:6],
par_temp_df[dist,9:10],
fun=distGeo)
}
###Code to add hybrid status
par_temp_df$Hybrid_Status <- NA
par_temp_df <- par_temp_df %>%
mutate(Hybrid_Status = case_when(Maternal_Species == Candidate_Father_Species ~ FALSE,
Maternal_Species != Candidate_Father_Species ~ TRUE))
#write to file
write.csv(par_temp_df, paste0("Results/Parentage_Results/CSV_Files/UHA_",full_scen[[sc]], "_analysis_df.csv"),
row.names = FALSE)
}
#read in summary df for final figures
UHA_res_df <- read.csv("Results/Parentage_Results/CSV_Files/UHA_HCF_all_loci_analysis_df.csv")
#load in list of parentage summary results CSVs
par_sum_df <- list.files(path = "Results/Parentage_Results/CSV_Files",
pattern = "par_sum.csv")
par_sum_df
#reorg list to fit order
par_sum_df <- list(par_sum_df[[3]], par_sum_df[[1]],
par_sum_df[[4]], par_sum_df[[2]])
par_sum_df
#list out analysis data frames
par_sum_analysis <- list.files(path = "Results/Parentage_Results/CSV_Files",
pattern = "analysis_df")
#order list
par_sum_analysis <- c(par_sum_analysis[[1]], par_sum_analysis[[2]],
par_sum_analysis[[4]], par_sum_analysis[[3]])
#load full scenario data frames
full_scen <- c("all_loci_AF", #all loci included with all father assignments
"all_loci_HCF", #all loci with only high confidence fathers included
"red_loci_AF", #reduced loci with all father assignments
"red_loci_HCF" #reduce loci with only high confidence father assignments included
)
#pull in UHA database
UHA_database <- read.csv("./Data_Files/CSV_Files/UHA_database.csv")
#save out list of maternal IDs
mat_n_ids <- paste0("MT",1:11)
#pull in UHA database
UHA_database <- read.csv("./Data_Files/CSV_Files/UHA_database_clean.csv")
#save out list of maternal IDs
mat_n_ids <- paste0("MT",1:11)
#list out the mt ids
mat_ids <- list()
for(mat in mat_n_ids){
mat_ids[[mat]] <- UHA_database[UHA_database$MT_ID == mat,"Tissue_ID"]
}
##first, create a data frame to compare non-exclusion probablities
#create matrix to store non-exclusion probabilities
exc_prob_df <- matrix(nrow = length(par_sum_df),
ncol = 2)
#loop over all parentage summary data frames
for(par in seq_along(par_sum_df)){
#load in par sum_df
temp_df <- read.csv(paste0("Results/Parentage_Results/CSV_Files/",
par_sum_df[[par]]))[,-1]
#rename colnames
colnames(temp_df) <- gsub("\\.","_", colnames(temp_df))
#now sum the columns
exc_prob_df[par,1] <- mean(temp_df[["First_parent_non_exclusion_probability"]])
exc_prob_df[par,2] <- mean(temp_df[["Second_parent_non_exclusion_probability"]])
}
#name columns and rows
rownames(exc_prob_df) <- c("all_loci", "all_loci_HCF", "red_loci", "red_loci_HCF")
colnames(exc_prob_df) <- c("First_parent_non_exclusion_probability",
"Second_parent_non_exclusion_probability")
#write out table
write.csv(exc_prob_df, "./Results/Parentage_Results/CSV_Files/non_exclusion_probabilities.csv")
## create a summary data frame with the maternal IDs
par_sum_stat_df <- matrix(nrow = length(mat_ids),
ncol = 11)
#add the maternal ids in a column
par_sum_stat_df[,1] <-  as.character(mat_ids)
#loop over all parentage scenarios with a summary data file
for(par in seq_along(par_sum_df)){
temp_df <- read.csv(paste0("./Results/Parentage_Results/CSV_Files/",par_sum_analysis[[par]]))
#loop over each maternal individual to create data frame
for(mat in seq_along(mat_ids)){
#add a column for the offspring counts by mom
par_sum_stat_df[mat,2] <- length(temp_df[temp_df$Maternal_ID == mat_ids[[mat]],"Offspring_ID"])
#add a column for number of dads per mom
par_sum_stat_df[mat,3] <- length(unique(temp_df[temp_df$Maternal_ID == mat_ids[[mat]],"Candidate_father_ID"]))
#add columns with the number of hybrid per mom and the number of hybrid fathers
par_sum_stat_df[mat,4] <- length(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]) & (temp_df$Hybrid_Status == TRUE),"Candidate_father_ID"])
par_sum_stat_df[mat,5] <- length(unique(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]) & (temp_df$Hybrid_Status == TRUE),"Candidate_father_ID"]))
#add half-sib columns
par_sum_stat_df[mat,6] <- length(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]) & (temp_df$Half_Sibs == TRUE),"Candidate_father_ID"])
par_sum_stat_df[mat,7] <- length(unique(temp_df[(temp_df$MT_ID == mat_ids[[mat]]) & (temp_df$Half_Sibs == TRUE),"Candidate_father_ID"]))
if(par_sum_stat_df[mat,2] == 0){
par_sum_stat_df[mat,8] <- 0
par_sum_stat_df[mat,9] <- 0
par_sum_stat_df[mat,10] <- 0
par_sum_stat_df[mat,11] <- 0
}else{
par_sum_stat_df[mat,8] <- min(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]),"dist_par"])
par_sum_stat_df[mat,9] <- max(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]),"dist_par"])
#recode hybrid status of min distance
par_sum_stat_df[mat,10] <- length(temp_df[temp_df$dist_par == min(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]),"dist_par"]) & temp_df$Hybrid_Status == TRUE,"Candidate_Father_Species"])
#recode hybrid status of min distance
par_sum_stat_df[mat,11] <- length(temp_df[temp_df$dist_par == max(temp_df[(temp_df$Maternal_ID == mat_ids[[mat]]),"dist_par"]) & temp_df$Hybrid_Status == TRUE,"Candidate_Father_Species"])
}
# #add colnames
colnames(par_sum_stat_df) <- c("MT_ID", "Off_N",
"Fathers_N", "Hybrid_Off_N",
"Hybrid_Father_N", "Half_Sib_Off_N",
"Half_Sib_Father_N", "Min_Dist", "Max_Dist",
"Hybrid_Min", "Hybrid_Max")
# #write out summary data frame with scenario
write.csv(par_sum_stat_df, paste0("Results/Parentage_Results/CSV_Files/", full_scen[[par]], '_par_sum_stat_df.csv'),
row.names = FALSE)
}
}
#create summary father data frame
UHA_father_df <- as.data.frame(table(UHA_res_df$Candidate_Father_Species))
#rename
colnames(UHA_father_df) <- c("Species", "Count")
#fix deamii
levels(UHA_father_df$Species)[[1]] <- "Quercus x deamii"
#resort data frame
UHA_father_df <- UHA_father_df %>%
dplyr::arrange(across("Count",desc))
#### Now write out figures
png(paste0("Results/Parentage_Results/Figures/AL_HCF_hybrid_species_count.png"),
res = 600, width = 5200, height = 3500)
UHA_father_df %>%
ggplot(aes(x = fct_rev(fct_reorder(Species, Count)), y = Count)) +
geom_col(fill="forestgreen") +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5) +
scale_y_continuous(limits = c(0,150)) +
theme_bw() +
labs(x="Candidate Father Species",y = "Number of Offspring") +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 1))
dev.off()
UHA_father_df %>%
ggplot(aes(x = fct_rev(fct_reorder(Species, Count)), y = Count)) +
geom_col(fill="forestgreen") +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5) +
scale_y_continuous(limits = c(0,150)) +
theme_bw() +
labs(x="Candidate Father Species",y = "Number of Offspring") +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 1))
#### Now write out figures
pdf(paste0("Results/Parentage_Results/Figures/AL_HCF_hybrid_species_count.png"),
height = 8, width = 6)
UHA_father_df %>%
ggplot(aes(x = fct_rev(fct_reorder(Species, Count)), y = Count)) +
geom_col(fill="forestgreen") +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5) +
scale_y_continuous(limits = c(0,150)) +
theme_bw() +
labs(x="Candidate Father Species",y = "Number of Offspring") +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 1))
dev.off()
#### Now write out figures
pdf(paste0("Results/Parentage_Results/Figures/AL_HCF_hybrid_species_count.pdf"),
height = 8, width = 6)
UHA_father_df %>%
ggplot(aes(x = fct_rev(fct_reorder(Species, Count)), y = Count)) +
geom_col(fill="forestgreen") +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5) +
scale_y_continuous(limits = c(0,150)) +
theme_bw() +
labs(x="Candidate Father Species",y = "Number of Offspring") +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 1))
dev.off()
#### Now write out figures
pdf(paste0("Results/Parentage_Results/Figures/AL_HCF_hybrid_species_count.pdf"),
height = 6, width = 10)
UHA_father_df %>%
ggplot(aes(x = fct_rev(fct_reorder(Species, Count)), y = Count)) +
geom_col(fill="forestgreen") +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5) +
scale_y_continuous(limits = c(0,150)) +
theme_bw() +
labs(x="Candidate Father Species",y = "Number of Offspring") +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 1))
dev.off()
#### Now write out figures
pdf(paste0("Results/Parentage_Results/Figures/AL_HCF_hybrid_species_count.pdf"),
height = 6, width = 8)
UHA_father_df %>%
ggplot(aes(x = fct_rev(fct_reorder(Species, Count)), y = Count)) +
geom_col(fill="forestgreen") +
geom_text(aes(label = paste("n =", Count)), vjust = -0.5) +
scale_y_continuous(limits = c(0,150)) +
theme_bw() +
labs(x="Candidate Father Species",y = "Number of Offspring") +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 1))
dev.off()
#create MT
UHA_res_df$MT_ID <- dplyr::case_when(
UHA_res_df$Maternal_ID == "UHA-0009" ~ "MT1",
UHA_res_df$Maternal_ID == "UHA-0010" ~ "MT2",
UHA_res_df$Maternal_ID == "UHA-0012" ~ "MT3",
UHA_res_df$Maternal_ID == "UHA-0013" ~ "MT4",
UHA_res_df$Maternal_ID == "UHA-0014" ~ "MT5",
UHA_res_df$Maternal_ID == "UHA-0015" ~ "MT6",
UHA_res_df$Maternal_ID == "UHA-0016" ~ "MT7",
UHA_res_df$Maternal_ID == "UHA-0257" ~ "MT8",
UHA_res_df$Maternal_ID == "UHA-0260" ~ "MT9",
UHA_res_df$Maternal_ID == "UHA-0261" ~ "MT10",
UHA_res_df$Maternal_ID == "UHA-0351" ~ "MT11"
)
table(UHA_res_df$MT_ID)
###### Hybrid status x distance jitter figure -------------------
UHA_res_df$hybrid_update <- NA
UHA_res_df[UHA_res_df$Hybrid_Status == "TRUE","Hybrid Status"] <- "Hybrid"
UHA_res_df[UHA_res_df$Hybrid_Status == "FALSE","Hybrid Status"] <- "Not Hybrid"
UHA_res_df %>%
ggplot(aes(x = MT_ID,
y = dist_par)) +
geom_boxplot(fill = "darkolivegreen4") +
geom_jitter(aes(fill = `Hybrid Status`), width = 0.2, size = 3, shape = 21, color = "black") +
scale_y_continuous(limits = c(0,1000)) +  # set limits for graph
scale_fill_manual(values = c("deeppink", "grey")) +
geom_text(data = . %>% count(Maternal_ID),
aes(label = paste("n =", n), y = 665), vjust = -3) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.5))
UHA_res_df %>%
ggplot(aes(x = `MT_ID`,
y = dist_par)) +
geom_boxplot(fill = "darkolivegreen4") +
geom_jitter(aes(fill = `Hybrid Status`), width = 0.2, size = 3, shape = 21, color = "black") +
scale_y_continuous(limits = c(0,1000)) +  # set limits for graph
scale_fill_manual(values = c("deeppink", "grey")) +
geom_text(data = . %>% count(Maternal_ID),
aes(label = paste("n =", n), y = 665), vjust = -3) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.5))
as.factor(UHA_res_df$MT_ID)
UHA_res_df %>%
ggplot(aes(x = MT_ID,
y = dist_par)) +
geom_boxplot(fill = "darkolivegreen4") +
geom_jitter(aes(fill = `Hybrid Status`), width = 0.2, size = 3, shape = 21, color = "black") +
scale_y_continuous(limits = c(0,1000)) +  # set limits for graph
scale_fill_manual(values = c("deeppink", "grey")) +
geom_text(data = . %>% count(MT_ID),
aes(label = paste("n =", n), y = 665), vjust = -3) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.5))
naturalsort(UHA_res_df$MT_ID)
naturalsort::naturalsort(UHA_res_df$MT_ID)
UHA_res_df %>%
ggplot(aes(x = naturalsort::naturalsort($MT_ID),
UHA_res_df %>%
ggplot(aes(x = naturalsort::naturalsort(MT_ID),
y = dist_par)) +
geom_boxplot(fill = "darkolivegreen4") +
geom_jitter(aes(fill = `Hybrid Status`), width = 0.2, size = 3, shape = 21, color = "black") +
scale_y_continuous(limits = c(0,1000)) +  # set limits for graph
scale_fill_manual(values = c("deeppink", "grey")) +
geom_text(data = . %>% count(MT_ID),
aes(label = paste("n =", n), y = 665), vjust = -3) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.5))
as.factor(UHA_res_df$MT_ID)
#save as a factor
UHA_res_df$MT_ID <- as.factor(UHA_res_df$MT_ID)
UHA_res_df$MT_ID <- factor(UHA_res_df$MT_ID,
levels=c("MT1", "MT2", "MT3", "MT4",
"MT5","MT6","MT7","MT8",
"MT9","MT10","MT11"))
UHA_res_df %>%
ggplot(aes(x = MT_ID,
y = dist_par)) +
geom_boxplot(fill = "darkolivegreen4") +
geom_jitter(aes(fill = `Hybrid Status`), width = 0.2, size = 3, shape = 21, color = "black") +
scale_y_continuous(limits = c(0,1000)) +  # set limits for graph
scale_fill_manual(values = c("deeppink", "grey")) +
geom_text(data = . %>% count(MT_ID),
aes(label = paste("n =", n), y = 665), vjust = -3) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.5))
## write out figure text to compare hybrid status/distance by mother
pdf(paste0("Results/Parentage_Results/Figures/AL_HCF_dist_par_hybrid.png"),
height = 6, width = 8)
UHA_res_df %>%
ggplot(aes(x = MT_ID,
y = dist_par)) +
geom_boxplot(fill = "darkolivegreen4") +
geom_jitter(aes(fill = `Hybrid Status`), width = 0.2, size = 3, shape = 21, color = "black") +
scale_y_continuous(limits = c(0,1000)) +  # set limits for graph
scale_fill_manual(values = c("deeppink", "grey")) +
geom_text(data = . %>% count(MT_ID),
aes(label = paste("n =", n), y = 665), vjust = -3) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.5))
dev.off()
## write out figure text to compare hybrid status/distance by mother
pdf(paste0("Results/Parentage_Results/Figures/AL_HCF_dist_par_hybrid.pdf"),
height = 6, width = 8)
UHA_res_df %>%
ggplot(aes(x = MT_ID,
y = dist_par)) +
geom_boxplot(fill = "darkolivegreen4") +
geom_jitter(aes(fill = `Hybrid Status`), width = 0.2, size = 3, shape = 21, color = "black") +
scale_y_continuous(limits = c(0,1000)) +  # set limits for graph
scale_fill_manual(values = c("deeppink", "grey")) +
geom_text(data = . %>% count(MT_ID),
aes(label = paste("n =", n), y = 665), vjust = -3) +
xlab("Maternal Tree ID") + ylab("Distance between parents (m)") +
theme_bw() +
theme(axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.x = element_text(size = 14, angle = 45, hjust = 1),
axis.text.y = element_text(size = 14),
legend.text = element_text(size = 14),
legend.title = element_text(size = 16),
plot.title = element_text(size = 18, hjust = 0.5))
dev.off()
